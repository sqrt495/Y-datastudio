;!function($){
    "use strict";

    $(function() {

        $('.advertiser').each(function(){

            var $adv = $(this);
            var $calendarPopup = $adv.find('.adv-cal-popup');

            $adv.find('.adv-cal-opener').on('click', function(){
                $calendarPopup.addClass('-show');
            });

            $calendarPopup.find('.adv-cal-popup__close').on('click', function(){
                $calendarPopup.removeClass('-show');
            });

        });

        var $advPeriodVal = $("#adv-period-val");

        if ( $advPeriodVal.length ) {

            $advPeriodVal
                .dateRangePicker(
                    {
                        inline: true,
                        container: "#adv-period-container",
                        alwaysOpen: true,
                        startOfWeek: "monday",
                        language: $('html').attr('lang') == 'ru-RU' ? 'ru' : 'en',
                        showShortcuts: false
                    }
                );
            $advPeriodVal
                .bind("datepicker-change", function(event,obj)
                    {

                        function z(v) {
                            return v >= 10 ? v : "0" + v;
                        }

                        $("#adv-cal-popup__head__title").text(

                            obj.date1.getFullYear() + "." +
                            z(obj.date1.getMonth() + 1) + "." +
                            z(obj.date1.getDate()) +

                            " - " +

                            obj.date2.getFullYear() + "." +
                            z(obj.date2.getMonth() + 1) + "." +
                            z(obj.date2.getDate())

                        );
                        $(".adv-cal-btn-apply").removeAttr("disabled");

                        $('[name="period[date_start]"]').val( z( obj.date1.getDate() ) + "-" + z( obj.date1.getMonth() + 1 ) + "-" + obj.date1.getFullYear() );
                        $('[name="period[date_end]"]').val( z( obj.date2.getDate() ) + "-" + z( obj.date2.getMonth() + 1 ) + "-" + obj.date2.getFullYear() );

                        /* This event will be triggered when second date is selected */
                        //console.log(obj);
                        // obj will be something like this:
                        // {
                        // 		date1: (Date object of the earlier date),
                        // 		date2: (Date object of the later date),
                        //	 	value: "2013-06-05 to 2013-06-07"
                        // }

                    }
                );

            if (
                $advPeriodVal.attr('data-period') == 'period' &&
                $advPeriodVal.attr('data-date-start') &&
                $advPeriodVal.attr('data-date-end')
            ) {
                $advPeriodVal.data("dateRangePicker")
                    .setDateRange($advPeriodVal.attr('data-date-start'), $advPeriodVal.attr('data-date-end'));
            }

        }

    });

}(jQuery);;;!function($){
    "use strict";

    function ReportSender($row) {
        const t = this;
        const  $downloadBtn = $row.find(".download-report");
        const $downloadBtnContainer = $row.find(".adv-list-col-download");
        const $loader = $('<div class="download-report__loading"></div>');

        t.listen = function() {
            $downloadBtn.on("click", function () {
                t.sendAjax($(this).data().href);
            });
        };

        t.sendAjax = function(url) {
            t.showPreloader();

            $.ajax({
                url: url,
                success:  function (data, status) {
                    if (status === "success" && data.success ){
                        t.showSendStatus();
                    }
                }
            });
        };

        t.showPreloader = function() {
            $downloadBtn.hide();
            $downloadBtnContainer.append($loader);
        };

        t.showSendStatus = function () {
            $loader.remove();
            $downloadBtnContainer.append("<span class='download-report__status'>Отчет отправлен на почту</span>");
            setTimeout(function (){
                t.hideSendStatus();
            }, 5000);
        };

        t.hideSendStatus = function() {
            $row.find(".download-report__status").remove();
            $downloadBtn.show();
        };
    }

    $(".adv-list__body-row").each(function () {
        const reportSend  = new ReportSender($(this));
        reportSend.listen();
    });

    const
        COLOR_FILL_2 = '#d2c6de',
        COLOR_FILL = '#805b9f',
        Y_SCALE = 1.1;

    function GraphBeziers( $parent, $container ) {
        var t = this,
            $canvas = $parent.find('canvas'),
            canvas = $canvas[0],
            ctx = canvas.getContext('2d'),
            ctx_width = $container.width() - 70,
            ctx_height = 185;

        var
            min_value = null,
            max_value = null,
            col_width = null,
            col_height_ratio = null;

        t.values_start = null;
        t.values_end = null;

        $canvas.attr('width', ctx_width );
        $canvas.attr('height', ctx_height );

        t.getCoordLines = function( values ) {
            var res = [];

            var max_value = Math.max.apply( Math, values );

            values.map(function( e, i ){
                var c = {};

                c.x = col_width * (i + 1) - col_width / 2;
                c.y = ctx_height * ( 1 - e / (max_value * Y_SCALE) ) ;

                res[i] = c;
            });

            return res;
        }

        t.getSumValues = function(values){
            var sum = 0;
            values.map(function(e){
                sum += e;
            })
            return sum;
        }

        t.setLegendLabels = function( params ) {

            var max = $.lib.max( params.values ) * Y_SCALE;

            if ( max <= 0 ) return;

            $parent.find('.bz-title-1').text( $.lib.numberToFormatGraph( Math.round(max), max, true) );
            $parent.find('.bz-title-2').text( $.lib.numberToFormatGraph( Math.round(max * 0.75), max, true) );
            $parent.find('.bz-title-3').text( $.lib.numberToFormatGraph( Math.round(max * 0.5), max, true) );
            $parent.find('.bz-title-4').text( $.lib.numberToFormatGraph( Math.round(max * 0.25), max, true) );

            // var col_len = 7;
            var titles = params.titles;
            // var len = titles.length;


            for (let i = 0; i< params.titles.length; i++) {
                $parent.find('.bz-title-bot-' + (1 + i)).text( titles[i] );
            }

            // $parent.find('.bz-title-bot-1').text( titles[0] );

            // for (var j = 2; j < col_len; j++)
            //     $parent.find('.bz-title-bot-' + j ).text( titles[ Math.floor( (len - 2)/(col_len - 2) * ( j - 1 )  ) ] );

            // $parent.find('.bz-title-bot-7').text( titles[len - 1] );

            $parent.addClass('-col-' + 7);

        }

        t.clearLegendLabels = function() {
            $parent.find('[class*="bz-title-"]:not(.bz-title-bot)').text('');
            $parent.find('[class*="bz-title-bot-"]').text('');

            for (var i = 0; i < 20; i++)
                $parent.removeClass('-col-' + i);

        }

        t.setCtxStyle = function() {

            var grd = ctx.createLinearGradient(ctx_width/2,0,ctx_width/2,ctx_height);
            grd.addColorStop(0.5, COLOR_FILL);
            grd.addColorStop(1, COLOR_FILL_2);

            ctx.fillStyle = grd;
            ctx.strokeStyle = grd;
        };

        t.prepareData = function(params){
            const dayNames = ["Вс", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб"];

            if (params.titles.length >= 7 || params.titles.length === 0){
                params.titles = params.titles.map(function (title) {
                    if (typeof title === "number") {
                        const t = moment.unix(title);
                        return t.format("DD.MM\n ") + dayNames[t.day()];
                    }
                    return title;
                });
                return  params;
            }

            const cinemaWeek = [4,5,6,0,1,2,3].map(function (day) {
                const mathes = params.titles.filter(function (title) {
                    return moment.unix(title).day() === day;
                });
                const dayName = dayNames[day];

                return {
                    day: day,
                    moment: mathes && mathes.length === 1 ? mathes[0] : null,
                    title: mathes && mathes.length === 1 ? moment.unix(mathes[0]).format("DD.MM\n " + dayName) : null,
                }
            });

            const dayWillAdded = 7 - params.titles.length;

            const fisrtDay = moment.unix(params.titles[0]).day();

            if (fisrtDay > 4) {
                //increment days
                for (let y = 0; y < dayWillAdded; y++) {
                    const unix = typeof params.titles[params.titles.length - 1] === 'number';
                    if (unix) {
                        params.titles.push(moment.unix(params.titles[params.titles.length - 1]).add((1), "days"));
                    } else {
                        params.titles.push(moment(params.titles[params.titles.length - 1]).add((1), "days"));
                    }
                    params.values.push(0);
                }
            } else {
                //decrement days
                for (let y = 0; y < dayWillAdded; y++) {
                    const unix = typeof params.titles[0] === 'number';
                    if (unix) {
                        const adeded = moment.unix(params.titles[0]).add(-1, "days");
                        params.titles.unshift(adeded);
                    } else {
                        const unsixTime = params.titles[0].unix();
                        const adeded = moment.unix(unsixTime).add(-1, "days");
                        params.titles.unshift(adeded);
                    }
                    params.values.unshift(0);
                }
            }

            params.titles = params.titles.map(function(t) {
                if (typeof t === "number") {
                    const day = moment.unix(t);
                    const dayName = dayNames[day.day()];
                    return day.format("DD.MM\n ") + dayName;
                } else {
                    const dayName = dayNames[t.day()];
                    return t.format("DD.MM\n ") + dayName;
                }
            });

            return params;
        };

        t.draw = function(params) {

            params = t.prepareData(params);

            // var col_len = 7;
            var _values = params.values;
            // var len = params.values.length;

            // _values.push(params.values[0]);

            // for (var j = 2; j < col_len; j++)
            //     _values.push( params.values[ Math.floor( (len - 2)/(col_len - 2) * ( j - 1 )  ) ] );

            // _values.push(params.values[len - 1]);


            t.clear();
            $parent.removeClass('-error');
            t.setLegendLabels(params);

            min_value = Math.min.apply( Math, _values );
            max_value = Math.max.apply( Math, _values );

            //set start, end for y-scale
            t.values_start = min_value - ( max_value - min_value ) / (_values.length - 1);
            t.values_end = max_value +  ( max_value - min_value ) / (_values.length - 1);

            col_height_ratio = ctx_height / (t.values_end - t.values_start);
            col_width = ctx_width / _values.length;

            var points = t.getCoordLines(_values);

            draw();

            function draw() {

                paper.setup( canvas );
                var view = paper.view;
                var Path = paper.Path;
                var Point = paper.Point;

                var speed = 7;

                var path1 = new Path({
                    fillColor: {
                        gradient: {
                            stops: [COLOR_FILL_2, COLOR_FILL]
                        },
                        origin: [0, view.size.height],
                        destination: [0, 0]
                    },
                    closed: true
                });

                function initializePath() {

                    path1.add(view.bounds.bottomLeft);

                    for (var i = 0; i < points.length; i++)
                        path1.add(new Point(0, 0));

                    path1.add(view.bounds.bottomRight);

                    path1.smooth({type: 'asymmetric'});

                }

                initializePath();

                view.onFrame = function (event) {
                    var _speed = speed || 1,
                        itr = Math.round(100 / _speed);

                    var p = points;

                    if (event.count == itr) {
                        view.pause();
                    } else {

                        for (var i = 0; i < p.length; i++) {

                            var point = new Point(p[i].x, view.size.height - ( view.size.height - p[i].y ) * (event.count / itr) );

                            path1.segments[i + 1].point = point;
                        }

                        path1.smooth();
                    }
                }
            }
        }

        t.enableLoader = function() {
            $parent.addClass('-loaded');
        }
        t.disableLoader = function() {
            $parent.removeClass('-loaded');
        }
        t.displayError = function() {
            t.clear();
            t.disableLoader();
            $parent.addClass('-error');
        }
        t.clear = function() {
            $parent.removeClass('-error');
            t.disableLoader();
            t.clearLegendLabels();
            ctx.clearRect(0, 0, ctx_width, ctx_height);
        }

    }

    $(function(){

        $('.advertiser').each(function(){

            var $adv = $(this);

            //graph
            $adv.find('.-adv-graph-beziers.graph-beziers').each(function(){
                var gb =  new GraphBeziers( $(this), $(this).closest('.adv-graph') );

                $(this).on('enableLoader',function() {
                    gb.enableLoader();
                });
                $(this).on('disableLoader',function() {
                    gb.disableLoader();
                });
                $(this).on('displayError',function() {
                    gb.displayError();
                });
                $(this).on('draw',function(e, p) {
                    gb.draw(p);
                });

                $(this).trigger(
                    'draw',
                    [JSON.parse( $(this).find('.bz-data').html() )]
                );

            });

            $adv.find('.adv-graph-controls__item').on('click', function(e){
                e.preventDefault();

                $adv.find('.adv-graph-controls__item').removeClass('-act');
                $(this).addClass('-act');

                $adv.find('[data-id^="adv-graph-"]').removeClass('-act');
                $adv.find('[data-id="' + $(this).attr('data-href') + '"]').addClass('-act');

            });

            //search
            $adv.find('.adv-search__search').on('click', function() {
                $adv.find('.adv-search__form').addClass('-block-a');
            });
            $adv.find('.adv-search__form__close').on('click', function() {
                $adv.find('.adv-search__form').removeClass('-block-a');
            });

        });

    });

}(jQuery);


//adv-search__stat-select
!function($){

    $(function(){
        $('#adv-search__stat-select').bind('change',function() {
            document.location = $(this).find('option[value="' + $(this).val() + '"]').attr('data-url');
        });
    });

}(jQuery);

//js-advertiser-load-more
!function($){

    $(function(){
        $('.js-advertiser-load-more').bind('click',function() {

            var t = $(this);
            var $list = $( $(this).attr('data-container') );

            t.addClass('-load');

            $.get( t.attr('data-url'), {
                'offset': 10 * t.attr('data-page')
            }).success(function( response ){
                t.removeClass('-load');

                $list.append(response);

                const total = parseInt($(".adv-search__total").text());

                if (
                    $list.find('.adv-if-empty-list-label').length
                    || total === $(".adv-list__body-row").length
                /*|| $list.find('>*').length % 10 !== 0*/
                )
                    t.hide();

            }).error(function(){
                t.removeClass('-load');
            });

            $(this).attr('data-page', parseInt($(this).attr('data-page')) + 1 );

        });
    });

}(jQuery);;;(function($){
    'use strict';

    $(function(){

        var $body = $('body');

        $('.js-menu-aside-open').bind('click', function (e) {
            e.preventDefault();
            $body.addClass('open-menu');
        })
        $('.js-menu-aside-close').bind('click', function (e) {
            e.preventDefault();
            $body.removeClass('open-menu');
        })
        $('.menu-aside').jScrollPane({autoReinitialise: true, mouseWheelSpeed: 21});
        $('.menu-aside').bind('click', function(e){

            if ( ! ( $(e.target).hasClass('search') || $(e.target).closest('.search').size() > 0 ) )
                $body.removeClass('open-menu');

        })

    });

}(jQuery));;function renderCGraph ($el, data, type, activeFilms) {
    let maxValueInType = 0;
    const labels = {
        sum: 'Сборы, ₽',
        tickets: 'Зрители',
        sessions: 'Сеансы',
        money_per_session: 'Сборы на сеанс, ₽',
        tickets_per_session: 'Зрителей на сеанс',
        money_per_ticket: 'Средняя цена билета, ₽',
    };

    const colors = ['#86c230', '#f4ab3a', '#6590f1', '#af6eca', '#8dd0ff', '#a1e8ce', '#ea6666', '#e5e679', '#9969c5', '#e8b1ff'];

    const hatchingColors = [
        'linear-gradient(-45deg, transparent 49.9%, #86c230 49.9%, #86c230 90%, transparent 90%), linear-gradient(-45deg, #86c230 40%, transparent 40%)',
        'linear-gradient(-45deg, transparent 49.9%, #f4ab3a 49.9%, #f4ab3a 90%, transparent 90%), linear-gradient(-45deg, #f4ab3a 40%, transparent 40%)',
        'linear-gradient(-45deg, transparent 49.9%, #6590f1 49.9%, #6590f1 90%, transparent 90%), linear-gradient(-45deg, #6590f1 40%, transparent 40%)',
        'linear-gradient(-45deg, transparent 49.9%, #af6eca 49.9%, #af6eca 90%, transparent 90%), linear-gradient(-45deg, #af6eca 40%, transparent 40%)',
        'linear-gradient(-45deg, transparent 49.9%, #8dd0ff 49.9%, #8dd0ff 90%, transparent 90%), linear-gradient(-45deg, #8dd0ff 40%, transparent 40%)',
        'linear-gradient(-45deg, transparent 49.9%, #a1e8ce 49.9%, #a1e8ce 90%, transparent 90%), linear-gradient(-45deg, #a1e8ce 40%, transparent 40%)',
        'linear-gradient(-45deg, transparent 49.9%, #ea6666 49.9%, #ea6666 90%, transparent 90%), linear-gradient(-45deg, #ea6666 40%, transparent 40%)',
        'linear-gradient(-45deg, transparent 49.9%, #e5e679 49.9%, #e5e679 90%, transparent 90%), linear-gradient(-45deg, #e5e679 40%, transparent 40%)',
        'linear-gradient(-45deg, transparent 49.9%, #9969c5 49.9%, #9969c5 90%, transparent 90%), linear-gradient(-45deg, #9969c5 40%, transparent 40%)',
        'linear-gradient(-45deg, transparent 49.9%, #e8b1ff 49.9%, #e8b1ff 90%, transparent 90%), linear-gradient(-45deg, #e8b1ff 40%, transparent 40%)',
    ];

    function getRandomColor() {
        return "#398640";
        // return '#' + Math.floor(Math.random() * 16777215).toString(16);
    }

    const yearsColors = [
        '#7d4199',
        'linear-gradient(-45deg, transparent 49.9%, #ae7bc6 49.9%, #ae7bc6 90%, transparent 90%), linear-gradient(-45deg, #ae7bc6 40%, transparent 40%)',
        getRandomColor(),
        'linear-gradient(-45deg, transparent 49.9%, ' + getRandomColor() + ' 49.9%, ' + getRandomColor() + ' 90%, transparent 90%), linear-gradient(-45deg, ' + getRandomColor() + ', transparent 40%)',
        getRandomColor(),
        'linear-gradient(-45deg, transparent 49.9%, ' + getRandomColor() + ' 49.9%, ' + getRandomColor() + ' 90%, transparent 90%), linear-gradient(-45deg, ' + getRandomColor() + ', transparent 40%)',
        getRandomColor(),
        'linear-gradient(-45deg, transparent 49.9%, ' + getRandomColor() + ' 49.9%, ' + getRandomColor() + ' 90%, transparent 90%), linear-gradient(-45deg, ' + getRandomColor() + ', transparent 40%)',
    ];


    data.map(function (comparePeriod) {
        comparePeriod.map(function (item) {
            item[type] > maxValueInType
                ? maxValueInType = item[type] : ''
        });
    });

    $el.html('' +
        '                     <div class="swiper-container js-c-graph-container">' +
        '                        <div class="swiper-wrapper">' +
        '                            <div class="c-graph__wrapper swiper-slide">' +
        '                                <div class="c-graph__body">' +
        data.map(function(group) {
            return '' +
                '                                    <div class="c-graph__group">' +
                group.map(function(item, index) {

                    return '' +
                        '                                        <div class="c-graph__column js-graph-column"' +
                        '  style="height: ' + item[type] / (maxValueInType / 100) + '%; background: ' + yearsColors[index] + '; background-size: 7px 7px;" data-compare-index="' + index + '">' +
                        item.movies_data.map(function (movie, movieIndex) {
                            return '' +
                                '                                            <div class="c-graph__film"' +
                                '                                                 style="height: ' + movie[type] / (item[type] / 100) + '%; display: ' + (activeFilms[index].indexOf(movieIndex) === -1 ? 'none' : 'block') + '; ' +
                                ' background: ' + (index % 2 ? hatchingColors[movieIndex] : colors[movieIndex]) + '; background-size: 7px 7px;"' +
                                '></div>'
                        }).join('') +
                        '                                            <div class="c-graph__overlay">' +
                        '                                                <div class="c-graph__overlay-wrapper">' +
                        '                                                <span class="c-graph__overlay-triangle"></span>' +
                        '                                                <span class="c-graph__overlay-title">' + labels[type] + '</span>' +
                        '                                                <div class="c-graph__overlay-item">' +
                        '                                                    <span class="c-graph__overlay-marker"></span>' +
                        '                                                    <span class="c-graph__overlay-label">Всего</span>' +
                        '                                                    <span class="c-graph__overlay-count js-bitwise-digit">' + Math.round(item[type]) +  '</span>' +
                        '                                                    <span class="c-graph__overlay-percent"></span>' +
                        '                                                </div>' +
                        item.movies_data.map(function (movie, movieIndex) {
                            return '' +
                                (movie[type] ?
                                    '                                                <div class="c-graph__overlay-item" style="display:' + (activeFilms[index].indexOf(movieIndex) === -1 ? 'none' : 'flex') + '">' +
                                    '                                                    <span class="c-graph__overlay-marker"' +
                                    '                                                          style="background: ' + (index % 2 ? hatchingColors[movieIndex] : colors[movieIndex]) + ';"></span>' +
                                    '                                                    <span class="c-graph__overlay-label">' + movie.title  + '</span>' +
                                    '                                                    <span class="c-graph__overlay-count js-bitwise-digit">' + Math.round(movie[type]) + '</span>' +
                                    '                                                    <span class="c-graph__overlay-percent"> ' + Math.round(movie[type] / (item[type] / 100)) + '%</span>' +
                                    '                                                </div>' : '')
                        }).join('') +
                        '                                                </div>' +
                        '                                            </div>' +
                        '                                        </div>'
                }).join('') +
                '                                    </div>'
        }).join('') +
        '                                </div>' +
        '                                <div class="c-graph__labels">' +
        data.map(function(group) {
            return '' +
                '                                      <div class="c-graph__label-group">' +
                (group[0].date_start === group[0].date_end ?
                        '<span class="c-graph__label" style="width: ' + group.length * 40 + 'px">' +
                        group.map(function(item) {
                            return '' +
                                item.date_start.replace(/(\d+)\.(\d+)\.(\d+)/, '$3.$2')
                        }).join('/') +
                        '</span>'
                        : group.map(function(item) {
                            return '' +
                                '<span class="c-graph__label">' +
                                item.date_start.replace(/(\d+)\.(\d+)\.(\d+)/, '$3.$2') +
                                '-' + item.date_end.replace(/\d{2}(\d+)\.(\d+)\.(\d+)/, '$3.$2') +
                                '</span>'
                        }).join('')
                ) +
                '                                      </div>'
        }).join('') +
        '                                </div>' +
        '                            </div>' +
        '                        </div>' +
        '                        <div class="swiper-navigation">' +
        '                            <div class="swiper-btn swiper-backward swiper-btn_disabled"></div>' +
        '                            <div class="swiper-scrollbar"></div>' +
        '                            <div class="swiper-btn swiper-forward"></div>' +
        '                        </div>' +
        '                     </div>'
    );

    $el.parent().find('.c-graph__legend').remove();
    $el.parent().append('' +
        '                <div class="c-graph__legend">' +
        data[0].map(function(item, index) {

            return '' +
                '                    <div class="c-graph__legend-item">' +
                '                        <div class="c-graph__legend-color" style="background: ' + yearsColors[index] + '; background-size: 7px 7px;"></div>' +
                '                        <span class="c-graph__legend-label">' + item.date_end.replace(/(\d{4})\.(\d{2})\.(\d{2})/, '$1') + ' г.</span>' +
                '                    </div>'
        }).join('') +
        '                </div>')
}

function renderCTable ($el, data) {

    const labels = {
        sum: 'Сборы, ₽',
        tickets: 'Зрители',
        sessions: 'Сеансы',
        money_per_session: 'Сборы на сеанс, ₽',
        tickets_per_session: 'Зрителей на сеанс',
        money_per_ticket: 'Средняя цена билета, ₽',
    };

    const colors = ['#86c230', '#f4ab3a', '#6590f1', '#af6eca', '#8dd0ff', '#a1e8ce', '#ea6666', '#e5e679', '#9969c5', '#e8b1ff'];

    $el.html(
        '           <div class="compare-table__head">' +
        '               <div class="compare-table__col"></div>' +
        data.map(function(item) {
            return '' +
                '<div class="compare-table__col compare-table__col-period">' +
                '    <span class="compare-table__period">' +
                item.year +
                (item.title.length ? '<span class="compare-table__period-stare">&nbsp;*</span>' : '') +
                '    </span>' +
                (item.title.length ? '<span class="compare-table__note">Период еще не завершен</span>' : '') +
                '</div>'
        }).join('') +
        '           </div>' +
        '           <div class="compare-table__body">'  +

        '                <label class="compare-table__row js-compare-table-row compare-table__row_active" data-type="sum">' +
        '                    <span class="compare-table__col">' +
        '                        <input type="radio" name="compare" class="compare-table__input">' +
        '                        <span class="compare-table__radio"></span>' +
        '                        <span class="compare-table__label">' + labels.sum + '</span>' +
        '                    </span>' +
        data.map(function(item) {
            return '' +
                '                    <span class="compare-table__col">' +
                '                        <span class="compare-table__text js-bitwise-digit">' +
                Math.round(item.sum) +
                '                        </span>' +
                (item.sum_delta ? '' +
                    '<span class="compare-table__change-direction ' + (item.sum_delta > 0 ? " compare-table__change-direction_up" : "compare-table__change-direction_down") + '"></span>' +
                    '<span class="compare-table__change-percent">' + Math.round(item.sum_delta) + '%</span>'
                    : '') +
                '                    </span>'
        }).join('') +
        '                </label>' +
        '                <label class="compare-table__row js-compare-table-row" data-type="tickets">' +
        '                    <span class="compare-table__col">' +
        '                        <input type="radio" name="compare" class="compare-table__input">' +
        '                        <span class="compare-table__radio"></span>' +
        '                        <span class="compare-table__label">' + labels.tickets + '</span>' +
        '                    </span>' +
        data.map(function(item) {
            return '' +
                '                    <span class="compare-table__col">' +
                '                        <span class="compare-table__text js-bitwise-digit">' +
                Math.round(item.tickets) +
                '                        </span>' +
                (item.tickets_delta ? '' +
                    '<span class="compare-table__change-direction ' + (item.tickets_delta > 0 ? " compare-table__change-direction_up" : "compare-table__change-direction_down") + '"></span>' +
                    '<span class="compare-table__change-percent">' + Math.round(item.tickets_delta) + '%</span>'
                    : '') +
                '                    </span>'
        }).join('') +
        '                </label>' +
        '                <label class="compare-table__row js-compare-table-row" data-type="sessions">' +
        '                    <span class="compare-table__col">' +
        '                        <input type="radio" name="compare" class="compare-table__input">' +
        '                        <span class="compare-table__radio"></span>' +
        '                        <span class="compare-table__label">' + labels.sessions + '</span>' +
        '                    </span>' +
        data.map(function(item) {
            return '' +
                '                    <span class="compare-table__col">' +
                '                        <span class="compare-table__text js-bitwise-digit">' +
                Math.round(item.sessions) +
                '                        </span>' +
                (item.sessions_delta ? '' +
                    '<span class="compare-table__change-direction ' + (item.sessions_delta > 0 ? " compare-table__change-direction_up" : "compare-table__change-direction_down") + '"></span>' +
                    '<span class="compare-table__change-percent">' + Math.round(item.sessions_delta) + '%</span>'
                    : '') +
                '                    </span>'
        }).join('') +
        '                </label>' +
        '                <label class="compare-table__row js-compare-table-row" data-type="money_per_session">' +
        '                    <span class="compare-table__col">' +
        '                        <input type="radio" name="compare" class="compare-table__input">' +
        '                        <span class="compare-table__radio"></span>' +
        '                        <span class="compare-table__label">' + labels.money_per_session + '</span>' +
        '                    </span>' +
        data.map(function(item) {
            return '' +
                '                    <span class="compare-table__col">' +
                '                        <span class="compare-table__text js-bitwise-digit">' +
                Math.round(item.money_per_session) +
                '                        </span>' +
                (item.money_per_session_delta ? '' +
                    '<span class="compare-table__change-direction ' + (item.money_per_session_delta > 0 ? " compare-table__change-direction_up" : "compare-table__change-direction_down") + '"></span>' +
                    '<span class="compare-table__change-percent">' + Math.round(item.money_per_session_delta) + '%</span>'
                    : '') +
                '                    </span>'
        }).join('') +
        '                </label>' +
        '                <label class="compare-table__row js-compare-table-row" data-type="tickets_per_session">' +
        '                    <span class="compare-table__col">' +
        '                        <input type="radio" name="compare" class="compare-table__input">' +
        '                        <span class="compare-table__radio"></span>' +
        '                        <span class="compare-table__label">' + labels.tickets_per_session + '</span>' +
        '                    </span>' +
        data.map(function(item) {
            return '' +
                '                    <span class="compare-table__col">' +
                '                        <span class="compare-table__text js-bitwise-digit">' +
                Math.round(item.tickets_per_session) +
                '                        </span>' +
                (item.tickets_per_session_delta ? '' +
                    '<span class="compare-table__change-direction ' + (item.tickets_per_session_delta > 0 ? " compare-table__change-direction_up" : "compare-table__change-direction_down") + '"></span>' +
                    '<span class="compare-table__change-percent">' + Math.round(item.tickets_per_session_delta) + '%</span>'
                    : '') +
                '                    </span>'
        }).join('') +
        '                </label>' +
        '                <label class="compare-table__row js-compare-table-row" data-type="money_per_ticket">' +
        '                    <span class="compare-table__col">' +
        '                        <input type="radio" name="compare" class="compare-table__input">' +
        '                        <span class="compare-table__radio"></span>' +
        '                        <span class="compare-table__label">' + labels.money_per_ticket + '</span>' +
        '                    </span>' +
        data.map(function(item) {
            return '' +
                '                    <span class="compare-table__col">' +
                '                        <span class="compare-table__text js-bitwise-digit">' +
                Math.round(item.money_per_ticket) +
                '                        </span>' +
                (item.money_per_ticket_delta ? '' +
                    '<span class="compare-table__change-direction ' + (item.money_per_ticket_delta > 0 ? " compare-table__change-direction_up" : "compare-table__change-direction_down") + '"></span>' +
                    '<span class="compare-table__change-percent">' + Math.round(item.money_per_ticket_delta) + '%</span>'
                    : '') +
                '                    </span>'
        }).join('') +
        '                </label>' +
        '                 <div class="compare-table__films">' +
        '                    <div class="compare-table__col">' +
        '                        <span class="compare-table__label-helper"></span>' +
        '                        <span class="compare-table__label">Фильмы</span>' +
        '                    </div>' +
        data.map(function(item, index) {
            return '' +
                '                   <div class="compare-table__col js-compare-films-wrapper">' +
                '                        <form class="js-compare-films-col">' +
                item.movies.map(function(movie, movieIndex) {
                    return '' +
                        '                            <label class="compare-table__check js-compare-films-item" data-compare-index="' + index + '">' +
                        '                                <input type="checkbox" name="films"' + (movieIndex < 3 ? 'checked' : '') + '>' +
                        '                                <span class="compare-table__check-field" style="' + (movieIndex < 3 ? 'background: ' + colors[movieIndex] : '') + '"></span>' +
                        '' +
                        '                                <a href="/compare/movie/' + movie.id + '" target="_blank" class="compare-table__check-label">' + movie.title + '</a>' +
                        '                            </label>'
                }).join('') +
                '                        </form>' +
                '                        <span class="compare-table__films-more js-compare-films-more">Еще</span>' +
                '                    </div>'
        }).join('') +
        '                </div>' +
        '           </div>'

    )
}

function renderFilterYears ($el, selectedYear) {

    const now = new Date();

    $el.find('.js-analogy-check').each(function(index, item) {
        $(item).remove();
    });

    for (let i = now.getFullYear(); i >= 2015; i--) {
        if (i === selectedYear) continue;
        const element = '' +
            '                        <label class="compare-analogy__check js-analogy-check">' +
            '                            <input type="radio" value="' + i + '" name="analogy"' + (i === (selectedYear - 1) || (selectedYear === 2015 && i ===  now.getFullYear()) ? 'checked' : '') + '>' +
            '                            <span class="compare-analogy__check-field"></span>' +

            '                            <span class="compare-analogy__check-label">' + i + '</span>' +
            '                        </label>'

        $el.append(element);
    }

};;(function($) {

    const apiBase = '/api/v2';

    const $cGraph = $('.js-c-graph');
    if (!$cGraph.length) { return; }

    const $cTable = $('.js-c-table');

    const $compareGraphSortWrapper = $('.js-sort-wrapper');
    const $compareGraphSortBtns = $compareGraphSortWrapper.find('.js-sort-btn');
    const $compareSelectPeriod = $('#js-select-compare-period');
    const $compareReset = $('.js-compare-reset');
    const $compareFilters = $('.js-compare-filters');
    const $compareAnalogyWrapper = $('.js-analogy-wrapper');
    let $compareGraphContainer = $('.js-c-graph-container');


    let continueRender = false;
    let isInitedPeriod = false;
    let selectedYear = null;
    let params = null;

    const filterPeriods = {
        1: 'weekend',
        2: 'week',
        3: 'year',
        6: 'month'
    };

    const now = new Date();

    let activeFilms = {};

    for (let i = 0; i <= now.getFullYear() - 2015; i++) {
        activeFilms[i] = [0, 1, 2];
    }

    $compareSelectPeriod.on('change', function (e) {
        const rangeResult = $(e.target).data('rangeResult');
        if (!rangeResult) return;

        let shouldHideNext = false;

        if (selectedYear !== rangeResult.end_date.replace(/(\d{4})-(\d{2})-(\d{2})/, '$1')) {
            selectedYear = rangeResult.end_date.replace(/(\d{4})-(\d{2})-(\d{2})/, '$1');
            renderFilterYears($compareAnalogyWrapper, +selectedYear);
            $('input[name="analogy"]').on('change', function() { render() });
        }

        if (!isInitedPeriod) {
            if ($('.js-select').length) {
                setTimeout(function () {
                    isInitedPeriod = true;

                    setDefaultParams();
                }, 1000);
            }
        }

        $compareGraphSortBtns.each(function(index, item) {
            $(item).show();

            if (filterPeriods[rangeResult.rangeType] === $(item).data('grouping')) {
                shouldHideNext = true;
            } else {
                shouldHideNext ? $(item).hide() : '';
            }
        });

        if (continueRender) {
            continueRender = false;
            return;
        }

        if (isInitedPeriod) {
            render();
        }

    });

    $compareReset.on('click', function(e) {
        setDefaultParams();
    });

    $compareGraphSortBtns.on('click', function (e) {
        const $target = $(e.target).closest('.js-sort-btn');
        if (!$target || $target.hasClass('cp__period-item_active')) return;

        const $sortParam = $target.data('grouping');
        setActiveSortBtn($sortParam);
    });

    function addColorsToActiveFilms() {
        const colors = ['#86c230', '#f4ab3a', '#6590f1', '#af6eca', '#8dd0ff', '#a1e8ce', '#ea6666', '#e5e679', '#9969c5', '#e8b1ff']
        const $filmsCol = $('.js-compare-films-col');

        $filmsCol.each(function(index, item) {
            const $filmInputs = $(item).find('input[name="films"]');

            $filmInputs.each(function (index, item) {
                $(item).on('change', function() {
                    const $checkWrapper = $(item).parent();
                    const checkEl = $checkWrapper.find('.compare-table__check-field');
                    const $currentIndexColumns = $('.js-c-graph-container [data-compare-index="' + $checkWrapper.data('compare-index') + '"]');

                    if ($(item).prop('checked')) {
                        checkEl.css('background', colors[index]);

                        $currentIndexColumns.find('.c-graph__film:nth-child(' + (index + 1) + ')').show();
                        $currentIndexColumns.find('.c-graph__overlay-item:nth-of-type(' + (index + 2) + ')').show();

                        activeFilms[$checkWrapper.data('compare-index')].push(index);
                    } else {
                        checkEl.css('background', 'transparent');

                        $currentIndexColumns.find('.c-graph__film:nth-child(' + (index + 1) + ')').hide();
                        $currentIndexColumns.find('.c-graph__overlay-item:nth-of-type(' + (index + 2) + ')').hide();

                        activeFilms[$checkWrapper.data('compare-index')]
                            .splice(activeFilms[$checkWrapper.data('compare-index')].indexOf(index), 1)
                    }
                })
            });
        });
    }

    function addSelectRow() {
        const $compareTableRows = $('.js-compare-table-row');

        $.each($compareTableRows, function (index, row) {
            $(row).on('click', function(e) {

                const $targetRow = $(e.target).closest('.js-compare-table-row');

                if ($targetRow.hasClass('compare-table__row_active')) return;

                $.each($compareTableRows, function (index, tableRow) {
                    $(tableRow).removeClass('compare-table__row_active');
                });

                $targetRow.addClass('compare-table__row_active');
                renderOnlyGraph();
            })
        });
    }

    function setActiveSortBtn(type) {
        const $shouldSetActive = $('.js-sort-btn[data-grouping="' + type + '"]');

        $.each($compareGraphSortBtns, function (index, item) {
            $(item).removeClass('cp__period-item_active');
        });

        $shouldSetActive.addClass('cp__period-item_active');

        $cGraph.removeClass('c-graph_day');
        $cGraph.removeClass('c-graph_week');
        $cGraph.removeClass('c-graph_weekend');
        $cGraph.removeClass('c-graph_month');
        $cGraph.addClass('c-graph_' + type);

        renderOnlyGraph();
    }

    function initMoreFilms() {

        const $filmsWrapper = $('.js-compare-films-wrapper');

        $.each($filmsWrapper, function (index, wrapper) {
            const $wrapper = $(wrapper);
            const $filmsColumn = $wrapper.find('.js-compare-films-col');
            const $filmsMoreBtn = $wrapper.find('.js-compare-films-more');
            const $films = $filmsColumn.find('.js-compare-films-item');
            const $threeFilms = $.grep($films, function (item, i) {
                return i < 3;
            });

            if ($films.length <= 3) {
                $filmsMoreBtn.hide();
                return;
            }

            setFilmsHeight($threeFilms);

            $filmsMoreBtn.on('click', function() {
                if (!$(this).hasClass('expanded')) {
                    setFilmsHeight($films);

                    $filmsMoreBtn.addClass('expanded');
                    $filmsMoreBtn.text('Меньше');
                } else {
                    setFilmsHeight($threeFilms);

                    $filmsMoreBtn.removeClass('expanded');
                    $filmsMoreBtn.text('Еще')
                }
            });

            function setFilmsHeight($films) {
                let $filmsHeight = 0;

                if ($films.length === 3) {

                    $.each($films, function (index, film) {
                        $filmsHeight += $(film).height()
                    });
                    $filmsHeight = $filmsHeight + 32 + 'px';
                } else {

                    $.each($films, function (index, film) {
                        $filmsHeight = $filmsHeight + $(film).height() + 16;
                    });
                    $filmsHeight += 'px';
                }

                $filmsColumn.css('maxHeight', $filmsHeight);
            }
        });
    }

    function setDefaultParams() {
        const now = new Date();
        let endPeriod = null;

        if (now.getDay() >= 0 && now.getDay() < 3) {
            endPeriod = 'Уикенд'
        } else {
            endPeriod = 'Неделя'
        }

        $('.js-custom-select-value').trigger('click');

        // Проверяем все доступные периоды, и тригеррим клик на соответствующем endPeriod
        $('.js-custom-select-list li').each(function(index, item) {
            if ($(item).text() === endPeriod) {
                continueRender = true;
                $(item).trigger('click');
            }
        });

        // Ставим последний из доступных периодов
        $('.js-range-select .rs-val').trigger('click');
        $('.js-range-select .rs-dropdown span:first-child').trigger('click');
    }

    function renderOnlyGraph() {
        const apiLink = getApiLink('compare_detail');

        $.ajax({
            url: apiBase + apiLink,
            beforeSend: function () {
                $cGraph.html('<div class="c-graph__loading"></div>');
                $compareFilters.addClass('compare-filters_disable');
                $compareGraphSortWrapper.addClass('cp__period_disable');
                $cTable.addClass('compare-table__box_disable');
            },
            success: function (response) {
                renderCGraph($cGraph, response, $('.js-compare-table-row.compare-table__row_active').data('type'), activeFilms);
                $compareGraphContainer = $('.js-c-graph-container');
                initSwiper($compareGraphContainer, 'c');
                setDigitDischarge();
                $compareFilters.removeClass('compare-filters_disable');
                $compareGraphSortWrapper.removeClass('cp__period_disable');
                $cTable.removeClass('compare-table__box_disable');
            },
            error: function (jqXHR) {
                if (jqXHR.status !== 200) {
                    renderServerError($('.compare-page'), jqXHR.status)
                }
            }
        });

    }

    function render () {
        const apiLink = getApiLink('compare_general');

        $.ajax({
            url: apiBase + apiLink,
            beforeSend: function () {
                $cGraph.html('<div class="c-graph__loading"></div>');
                $cTable.html('<div class="compare-table__loading"></div>');
                $compareFilters.addClass('compare-filters_disable');
                $compareGraphSortWrapper.addClass('cp__period_disable');
                $cTable.addClass('compare-table__box_disable');

                for (let i = 0; i <= now.getFullYear() - 2015; i++) {
                    activeFilms[i] = [0, 1, 2];
                }
            },
            success: function (response) {
                renderCTable($cTable, response);

                addSelectRow();
                initMoreFilms();
                addColorsToActiveFilms();
                renderOnlyGraph();
            },
            error: function (jqXHR) {
                if (jqXHR.status !== 200) {
                    renderServerError($('.compare-page'), jqXHR.status)
                }
            }
        });
    }

    function getApiLink(methodName) {
        const rangeResult = $('.js-range-select').data('rangeResult');
        if (!rangeResult) return;

        const params = {
            period: filterPeriods[rangeResult.rangeType],
            grouping: $('.js-sort-btn.cp__period-item_active').data('grouping'),
            year_compare: $('input[name="analogy"]:checked').val(),
            top: '2',
            date_start: rangeResult.start_date.replace(/(\d{4})-(\d{2})-(\d{2})/, '$1.$2.$3'),
            date_end: rangeResult.end_date.replace(/(\d{4})-(\d{2})-(\d{2})/, '$1.$2.$3'),
            sort_type: $('.js-compare-table-row.compare-table__row_active').data('type'),
            sort: 'descending'
        };

        let link = '';
        for (key in params) {
            params[key]
                ? link += key + '=' + params[key] + '&' : '';
        }

        return '/' + methodName + '?' + link
    }



})(jQuery);;;(function($) {
    'use strict';

    $(function () {
        $(".js-open-feedback").fancybox({
            maxWidth	: 400,
            maxHeight	: 600,
            fitToView	: false,
            width		: 350,
            height		: 'auto',
            autoSize	: false,
            closeClick	: false,
            openEffect	: 'none',
            closeEffect	: 'none'
        });
        $('#feedback-form').bind('submit', function(e){

            e.preventDefault();

            var t = $(this),
                $email = $('#feedback-form-email'),
                $name = $('#feedback-form-name'),
                $text = $('#feedback-form-text');

            remove_error_class();

            if ( $name.val() == '' ) {
                $.lib.alert({
                    'id': 'alert-err-feedback-name',
                    'head': t.attr('data-msg-head'),
                    'text': $name.attr('data-msg-error-empty'),
                    'error': 1
                })
                $name.addClass('-error');
                return false;
            }

            if ( $email.val() == '' ) {
                $.lib.alert({
                    'id': 'alert-err-feedback-email',
                    'head': t.attr('data-msg-head'),
                    'text': $email.attr('data-msg-error-empty'),
                    'error': 1
                })
                $email.addClass('-error');
                return false;
            }
            if ( !$.lib.test_email( $email.val() )  ) {
                $.lib.alert({
                    'id': 'alert-err-feedback-email',
                    'head': t.attr('data-msg-head'),
                    'text': $email.attr('data-msg-error'),
                    'error': 1
                })
                $email.addClass('-error');
                return false;
            }

            if ( $text.val() == '' ) {
                $.lib.alert({
                    'id': 'alert-err-feedback-name',
                    'head': t.attr('data-msg-head'),
                    'text': $text.attr('data-msg-error-empty'),
                    'error': 1
                })
                $text.addClass('-error');
                return false;
            }

            var param = t.serializeArray();
            param = $.lib.add_csrf_4_form( param );
            $('body').addClass('-container-load');

            $.post( t.attr('action'), param)
                .success(function(){
                    $.lib.alert({
                        'id': 'feedback',
                        'head': t.attr('data-msg-head'),
                        'text': t.attr('data-msg-success')
                    })
                })
                .error(function(){
                    $.lib.alert({
                        'id': 'feedback',
                        'head': t.attr('data-msg-head'),
                        'text': t.attr('data-msg-error'),
                        'error': 1
                    })
                })
                .always(function(){
                    t[0].reset();
                    $.fancybox.close();
                    $('body').removeClass('-container-load');
                });

            function remove_error_class() {
                t.find('-error').removeClass('-error');
            }

            return false;
        })
    })

})(jQuery)
;;(function($){
    'use strict';

    $(function(){

        var SEND_DELAY = 1200,
            send_interval = null;

        var $delayLine = $('.ff-delay-line>span');

        $('.filter-films').each(function(){

            var $controls = $('.ff-money, .ff-currency, .ff-distributors, .ff-tickets, .ff-tickets-per-sales, .ff-genre, .ff-age, .ff-sort', $(this));
            var $controls_date = $('.ff-date-start, .ff-date-end', $(this));
            var $control_text = $('.filter-films-query');
            var $load_btn = $('#films-load-btn');
            var $clearPeriod = $('#clearPeriod');
            var $clearAge = $('#clearAge'),
                $control_age = $('.ff-age');

            $control_age.on('change', function(){
                $('[name="ageRestrictions"]').val( $(this).val() );
            });

            $clearAge.on('click', function(e){

                $control_age
                    .each(function(){
                        $(this)[0].checked = false;
                    })
                    .trigger('change');

                $('[name="ageRestrictions"]').val(-1);

                e.preventDefault();
            });
            $clearPeriod.on('click', function(e){

                $controls_date
                    .removeAttr()
                    .val('')
                    .trigger('changeDate');

                e.preventDefault();
            });
            $controls.on('focus, focusSelect', function(){
                $delayLine.width(0);
                clearInterval(send_interval);
            });
            $controls_date.on('focus', function() {
                $delayLine.width(0);
                clearInterval(send_interval);
            });

            $controls.on('change', function(){
                send( params() );
            });
            $controls_date.on('changeDate', function(){

                if ( $(this).val() )
                    $(this).attr('data-timestamp', Math.round( $(this).datepicker('getDate').getTime()/1000 ) );
                else
                    $(this).attr('data-timestamp', 0);

                send( params() );

            });

            function params() {
                var res = {};

                $control_text.each(function(){
                    if ( $(this).val() != '' )
                        res['query'] = $(this).val();
                });

                $controls.each(function(){
                    if ( $(this).val() ) {
                        if ( true || !$(this).hasClass('ff-currency') )
                            res[$(this).attr('name')] = $(this).val();
                        else
                        //disable old ff-currency
                            res[$(this).attr('name')] = !$(this).is(':checked') ? 'en' : '';
                    }
                });

                $controls_date.each(function(){
                    if ( $(this).val() )
                        res[$(this).attr('name')] = $(this).attr('data-timestamp');
                    else  res[$(this).attr('name')] = '';
                });

                //reinit load more
                $load_btn
                    .attr('data-param', JSON.stringify( $.extend(JSON.parse($load_btn.attr('data-param')), res) ) )
                    .attr('data-page', 1)

                return res;
            }

        });

        function send( params ) {
            $delayLine.width(0);
            clearInterval(send_interval);

            $delayLine.animate({'width': '100%'}, SEND_DELAY - 10);

            send_interval = setTimeout(function(){
                $delayLine.width(0);
                send_body( params );
            }, SEND_DELAY)

        }

        function send_body( params ) {

            $('body').addClass('-container-load');
            $.post('/films/more-load/', params)
                .success(function( data ){
                    $('#films').html( data );

                    if ( $('#films').find('.last-label').length )
                        $('#films-load-btn').hide();
                    else
                        $('#films-load-btn').show();
                })
                .error(function(){
                    $.lib.alert({
                        'id': 'alert-load-news',
                        'head': $('#films-load-btn').attr('data-msg-head'),
                        'text': $('#films-load-btn').attr('data-msg-error'),
                        'error': 1
                    });
                })
                .always(function(){
                    $('body').removeClass('-container-load')
                });

        }


        $('#js-select-currency-films').on('changeCurrency', function(e, curId){

            var $closest = $(this).closest('.js-ff-block-field-money');

            if ( curId > 0 )
                $closest.addClass('-en');
            else
                $closest.removeClass('-en');

            $closest.find('.js-ff-money')
                .val('')
                .trigger('js-select-change');

            $closest.find('[name="currencyMoney"]')
                .val(curId)
                .trigger('change');

        });

        $('.js-ff-currency').on('click', function(){

            var $closest = $(this).closest('.js-ff-block-field-money');

            if ( !$(this).is(':checked') )
                $closest.addClass('-en');
            else
                $closest.removeClass('-en');

            $closest.find('.js-ff-money')
                .val('')
                .trigger('js-select-change');

        })

    });

}(jQuery));
;;!function($) {
    'use strict';

    $('.filter-gen-report.js').each(function(){

        var t = $(this),
            $submit = t.find('.fgr-btn-generate'),
            $f_regions = t.find('.select-regions-value'),
            $f_film = t.find('.sf-hidden'),
            $f_date_start = t.find('.frg-period-start'),
            $f_date_end = t.find('.frg-period-end'),
            $f_curRid = t.find('.select-currency');

        var $report_box = $('.report-box');

        $submit.on('click', function( e ){
            e.preventDefault();

            if ( validate() )
                getReport();

        })

        function getReport() {

            $('body').addClass('-container-load');

            var param = {},
                url_for_post = '/ekb/generate-report/';

            param.id = $f_film.val();
            param.region = $f_regions.val().replace(/^,|,$/, '');
            param.periodStart = $.lib.date.dateToSimpleISO( +$f_date_start.val() );
            param.periodEnd = $.lib.date.dateToSimpleISO( +$f_date_end.val() );

            $.post( url_for_post, param, function( response ){

                $('body').removeClass('-container-load');

                var data = JSON.parse(response);

                if ( !data || !data.length || !data[0].ticketSales.length ) {
                    error_post();
                    return;
                }

                //restructured data
                var
                    empty_date_obj = {};//JSON.parse( JSON.stringify( data[0].ticketSales[3] ) );

                for ( var p in empty_date_obj )
                    empty_date_obj[p] = '--';

                var ticketSales_0 = JSON.parse( JSON.stringify( data[0].ticketSales ) );
                var is_found = false;
                for (var i = 1; i < data.length; i++) {
                    var ticketSales = JSON.parse( JSON.stringify( data[i].ticketSales ) ),
                        new_ticketSales = [];

                    for (var ii = 0; ii < 2; ii++)
                        new_ticketSales.push(ticketSales[ii]);

                    for (var ii = 2; ii < ticketSales_0.length; ii++) {

                        var dateStart = ticketSales_0[ii].dateStart;

                        for (var iii = 0; iii < ticketSales_0.length; iii++) {

                            if ( !is_found && ( ticketSales[iii] && ticketSales[iii].dateStart == dateStart ) )
                            {
                                is_found = JSON.parse( JSON.stringify( ticketSales[iii] ) );
                            }
                        }

                        if ( is_found ) {
                            new_ticketSales.push(is_found);
                        } else {
                            new_ticketSales.push( JSON.parse( JSON.stringify( empty_date_obj ) ) );
                        }
                        is_found = false;
                    }

                    data[i].ticketSales = new_ticketSales;
                }
                //end restructured data

                var super_total = data[0];
                var total = data[1];
                var regions = data.slice(2);

                var rt_es = {
                    'filmTitle': t.find('.sf-display-value').find('.sf-item-film>div').text(),
                    'periodStart': t.find('.field._date.datepicker[data-value-field=".frg-period-start"]').val(),
                    'periodEnd': t.find('.field._date.datepicker[data-value-field=".frg-period-end"]').val(),
                    'filmId': param.id
                };
                var $report_table = $( $.lib.create_tmpl('report-table', rt_es) );

                if ( !total )
                    $report_table.find('#report-table-total').hide();

                //head and total and superTotal
                var i = -1;
                super_total.ticketSales.map(function( e ){
                    i++;

                    if ( i == 0) {
                        $report_table.find('#report-table-super-total').find('._total').html(
                            d( e.sum ) + ' ' +
                            "<span><i class=\"fa fa-user\"></i> "+
                            d( e.quantity ) +
                            "</span><span><i class=\"fa fa-video-camera\"></i> " +
                            d( e.sessions ) +
                            "</span>"
                        );
                        if (total)
                            $report_table.find('#report-table-total').find('._total').html(
                                d( total.ticketSales[0].sum ) + ' ' +
                                "<span><i class=\"fa fa-user\"></i> "+
                                d( total.ticketSales[0].quantity ) +
                                "</span><span><i class=\"fa fa-video-camera\"></i> " +
                                d( total.ticketSales[0].sessions ) +
                                "</span>"
                            );
                    }

                    if ( i == 1 ) {
                        $report_table.find('#report-table-super-total').find('._period').html(
                            d( e.sum ) + ' ' +
                            "<span><i class=\"fa fa-user\"></i> "+
                            d( e.quantity ) +
                            "</span><span><i class=\"fa fa-video-camera\"></i> " +
                            d( e.sessions ) +
                            "</span>"
                        );
                        if (total)
                            $report_table.find('#report-table-total').find('._period').html(
                                d( total.ticketSales[1].sum ) + ' ' +
                                "<span><i class=\"fa fa-user\"></i> "+
                                d( total.ticketSales[1].quantity ) +
                                "</span><span><i class=\"fa fa-video-camera\"></i> " +
                                d( total.ticketSales[1].sessions ) +
                                "</span>"
                            );
                    }

                    if ( i >= 2) {
                        //date in head
                        $report_table.find('#report-table-head').append('<div class="r-tbl-item">' +
                            $.lib.date.dateToDot( $.lib.date.parseDateFromEKB(  e.dateStart ) )
                            + '</div>');

                        //super total
                        $report_table.find('#report-table-super-total').append('<div class="r-tbl-item">' +
                            d( e.sum ) + ' ' +
                            "<span><i class=\"fa fa-user\"></i> "+
                            d( e.quantity ) +
                            "</span><span><i class=\"fa fa-video-camera\"></i> " +
                            d( e.sessions ) +
                            "</span>"
                            + '</div>');

                        //total
                        if (total)
                            $report_table.find('#report-table-total').append('<div class="r-tbl-item">' +
                                d( total.ticketSales[i].sum ) + ' ' +
                                "<span><i class=\"fa fa-user\"></i> "+
                                d( total.ticketSales[i].quantity ) +
                                "</span><span><i class=\"fa fa-video-camera\"></i> " +
                                d( total.ticketSales[i].sessions ) +
                                "</span>"
                                + '</div>');
                    }

                })

                //regions
                var i = -1;
                regions.map(function( e ){
                    i++;

                    var rr_es = {
                        'regionTitle': e.title,
                        'regionSuperTotal': d( e.ticketSales[0].sum ),
                        'regionTotal': d( e.ticketSales[1].sum ),
                        'regionSuperUser': d( e.ticketSales[0].quantity ),
                        'regionUser': d( e.ticketSales[1].quantity ),
                        'regionSuperSeances': d( e.ticketSales[0].sessions ),
                        'regionSeances': d( e.ticketSales[1].sessions )
                    };

                    var $region_row_html = $($.lib.create_tmpl('report-region-row', rr_es));
                    e.ticketSales.slice(2).map(function(e){
                        $region_row_html.append('<div class="r-tbl-item">' +
                            d( e.sum ) + ' ' +
                            "<span><i class=\"fa fa-user\"></i> "+
                            d( e.quantity ) +
                            "</span><span><i class=\"fa fa-video-camera\"></i> " +
                            d( e.sessions ) +
                            "</span>"
                            + '</div>');
                    })

                    $report_table.find('#report-table-body').append($region_row_html);

                });

                $report_box.html( $report_table );

                $report_box.find('[name="periodStart"]').val( param.periodStart );
                $report_box.find('[name="periodEnd"]').val( param.periodEnd );
                $report_box.find('[name="id"]').val( param.id );
                $report_box.find('[name="region"]').val( param.region );
                $report_box.find('[name="filmName"]').val( $('#filmName').text() );

            }).error(function(){
                error_post();
            })

        }

        function error_post() {
            $('body').removeClass('-container-load');
            $report_box.html( $.lib.create_tmpl('report-error') );
        }

        function validate() {

            //regions
            if ( false && $f_regions.val() == '' ) {
                $.lib.alert({
                    'id': 'alert-err-feedback-email',
                    'head': t.attr('data-msg-head'),
                    'text': $f_regions.attr('data-msg-error-empty'),
                    'error': 1
                })

                return false;
            }
            if ( false && $f_film.val() == '' ) {
                $.lib.alert({
                    'id': 'alert-err-feedback-email',
                    'head': t.attr('data-msg-head'),
                    'text': $f_film.attr('data-msg-error-empty'),
                    'error': 1
                })

                return false;
            }
            if ( $f_date_start.val() == '' ) {
                $.lib.alert({
                    'id': 'alert-err-feedback-email',
                    'head': t.attr('data-msg-head'),
                    'text': $f_date_start.attr('data-msg-error-empty'),
                    'error': 1
                })

                return false;
            }
            if ( $f_date_end.val() == '' ) {
                $.lib.alert({
                    'id': 'alert-err-feedback-email',
                    'head': t.attr('data-msg-head'),
                    'text': $f_date_end.attr('data-msg-error-empty'),
                    'error': 1
                })

                return false;
            }

            if ( $f_date_end.val() <= $f_date_start.val() ) {
                $.lib.alert({
                    'id': 'alert-err-feedback-email',
                    'head': t.attr('data-msg-head'),
                    'text': $f_date_end.attr('data-msg-valid-period'),
                    'error': 1
                })

                return false;
            }

            return true;
        }

        function d( d ) {
            if ( !d ) return '--';
            return $.lib.rank( d );
        }

    })

}(jQuery);
/* empty comment */;!function($){
    "use strict";


}(jQuery);;var showAnalogs = [];
var hiddenAnalogs = [];

!function($){
    "use strict";

    $(function(){
        var post;
        var post_list;
        var $popup = $('.analogs-popup');
        var $filmList = $('.film-list-analogs');


        var showAnalogsInSearch = getCurrentAnalogs();

        try {
            var _showAnalogs_html = $filmList.find('#fla-show-analogs').html();
            if (_showAnalogs_html){
                // showAnalogs = JSON.parse(_showAnalogs_html);
            }
            else {
                $("[data-analog-id]").each(function () {
                    // showAnalogs.push($(this).data("analog-id"));
                });

            }
            // save();
            // updateList();
        } catch(e) {
            console.warn(e, 'show analog by film')
        }

        try {
            var _hiddenAnalogs_html = $filmList.find('#fla-hidden-analogs').html();
            if (_hiddenAnalogs_html) {
                // hiddenAnalogs = JSON.parse(_hiddenAnalogs_html)
            }
        } catch(e) {
            console.warn(e, 'hidden analog by film')
        }

        // setResetBtnActivity();

        var showAnalogs_onStart = showAnalogs;
        var hiddenAnalogs_onStart = hiddenAnalogs;



        $('.js-open-analogs-popup').bind('click', function(e){
            e.preventDefault();
            $popup.addClass('-block-al');
            $('body').addClass('-hid');
            $popup.find('.flp-search__input').val("");

            addActiveClass();
            $(".should-remove").remove();
            renderFromSaved();
        });

        $popup.find('.flp-apply').bind('click', function(e){
            e.preventDefault();
            $popup.removeClass('-block-al');
            $('body').removeClass('-hid');
            save();
            updateList();
            $(".should-remove").remove();
        });

        $popup.find('.flp-close').bind('click', function(e){
            e.preventDefault();
            $popup.removeClass('-block-al');
            $('body').removeClass('-hid');
            showAnalogs = showAnalogs_onStart;
            hiddenAnalogs = hiddenAnalogs_onStart;
            $(".should-remove").remove();
        });

        $popup.find('.flp-search__input').bind('keyup', function(e){
            var t = $(this);

            if ( !(
                (
                    e.which <= 90
                    && e.which >= 48
                ) || e.which === 8
                || e.which === 46
            )) {
                return null;
            }

            if ( t.val().length > 2 ) {

                if (post) post.abort();
                $popup.addClass('-load');
                $popup.find('.analogs-popup__list .analogs').show();
                $popup.find('.fla--popup-error').hide();

                post = $.post(
                    $popup.attr('data-source'), {query: t.val()}
                ).done(function (response) {

                    $popup.find('.analogs-popup__list .analogs').html(response);
                    addActiveClass();

                    $popup.removeClass('-load');

                })
                    .fail(function () {
                        $popup.removeClass('-load');
                        $popup.find('.analogs-popup__list .analogs').hide();
                        $popup.find('.fla--popup-error').show();
                    });

            } else if(t.val().length === 0) {
                renderFromSaved();
            }
        });

        $popup.find('.analogs').on('click','.ag-item',function(e){
            e.preventDefault();

            var analogId = $(this).attr('data-id');

            if ( $(this).hasClass('-act') ) {
                hiddenAnalogs.push(parseInt(analogId));
                const indx = showAnalogs.indexOf(parseInt(analogId));
                showAnalogs.splice(indx, 1);

            } else {
                showAnalogs.push(parseInt(analogId));
                const indx = hiddenAnalogs.indexOf(parseInt(analogId));
                hiddenAnalogs.splice(indx, 1);
            }

            $(this).toggleClass('-act');
            save();

        });

        $popup.find('.flp-search-reset').on('click', function(e){
            $(".fla-table [data-analog-id]").each(function () {
                const id = $(this).data("analogId") || $(this).attr("data-analog-id");
                if (hiddenAnalogs.indexOf(id) === -1) {
                    hiddenAnalogs.push(id);
                }
                $('[data-id="' + id + '"]').removeClass("-act");
            });
            // addActiveClass();
            showAnalogs = [];
            save();
            // updateList();
        });

        function renderFromSaved() {
            var result = [];

            showAnalogsInSearch.each(function (i, item) {

                result.push('<article class="ag-item" data-id="' + item.id + '">' +
                    '<div class="ag-cols">' +
                    '        <div class="ag-left">' +
                    '<span class="ag-left__date">' + item.date_launch + '</span>' +
                    '            <span class="ag-left__pict"><a href="/films/analogs-detail/' + item.id + '/"><img src="' + item.source + '" /></a></span>' +
                    '        </div>' +
                    '        <div class="ag-right">' +
                    '            <div class="ag-right__title"><a href="/films/analogs-detail/' + item.id + '/">' + item.title + '</a></div>' +
                    '            <span class="ag-right__d1">' +
                    '<span>' + TRANSLATE_ANALOGS.firstWeekend + '</span>' +
                    '                <span class="-nowrap -dark">' + item.firstWeekend + '</span>' +
                    '</span>' +
                    '            <span class="ag-right__d2"><span>' + TRANSLATE_ANALOGS.secondWeekend + '</span>' +
                    '                <span class="-nowrap -dark">' + item.secondWeekend +
                    '            </span></span>' +
                    '            <span class="ag-right__d3"><span>' + TRANSLATE_ANALOGS.common + '</span>' +
                    '                <span class="-nowrap -dark">' + item.common +
                    '            </span></span>' +
                    '        </div>' +
                    '    </div>' +
                    '    <div class="ag-bottom">' +
                    '        <span class="ag-bottom__seances">' + item.sessions + '</span>' +
                    '        <span class="ag-bottom__tickets">' + item.tickets + '</span>' +
                    '    </div>' +
                    '</article>');

            });

            $(".analogs-popup__list .analogs").html(result);
            addActiveClass();
        }

        function getCurrentAnalogs() {
            return $(".fla-table-name").map(function (i, item) {
                var $children = $(item).siblings();

                return {
                    source: $($children[0]).find("img").attr("src"),
                    date_launch: $(item).data("launchDate"),
                    title: $(item).find("a").text(),
                    firstWeekend: $($children[2]).html(),
                    secondWeekend: $($children[3]).html(),
                    common: $($children[4]).html(),
                    sessions: $($children[5]).text(),
                    tickets: $($children[6]).text(),
                    id: $($children[7]).data("analogId")
                };
            });
        }

        function addActiveClass() {
            $popup.find('.analogs .ag-item').removeClass('-act');

            $("[data-analog-id]").each(function () {
                const id = $(this).data("analog-id") ? $(this).data("analog-id") : $(this).data("analogId");
                $popup.find('.analogs .ag-item[data-id="' + id + '"]').addClass('-act');
            });

            // for ( var i=0; i < showAnalogs.length; i++ )
            //     $popup.find('.analogs .ag-item[data-id="' + showAnalogs[i] + '"]').addClass('-act');
            setResetBtnActivity();
        }

        function save() {

            var filmId = $filmList.attr('data-film-id');

            var periodId = $filmList.attr('data-period-id');
            // var cookieName_show = "showAnalogsByFilm__" + filmId + "__" + periodId;
            // var cookieName_hidden = "hiddenAnalogsByFilm__" + filmId + "__" + periodId;

            if ( filmId && periodId ) {
                try {
                    var uniqueArray = showAnalogs.filter(function(item, pos) {
                        return showAnalogs.indexOf(item) == pos && item;
                    });
                    // $.cookie(cookieName_show, JSON.stringify(uniqueArray), { expires: 365*100 });

                    var uniqueArray_hid = hiddenAnalogs.filter(function(item, pos) {
                        return hiddenAnalogs.indexOf(item) == pos && item && showAnalogs.indexOf(item) === -1;
                    });
                    // $.cookie(cookieName_hidden, JSON.stringify(uniqueArray_hid), { expires: 365*100 });
                } catch(e) {
                    console.warn(e, 'show/hidden analog by film')
                }
            }

            setResetBtnActivity();
        }

        function setResetBtnActivity () {
            if ($(".ag-item.-act").length === 0) {
                $(".flp-search-reset").removeClass("active");
            } else {
                $(".flp-search-reset").addClass("active");
            }
        }

        function updateList(pushToFirstList) {

            if (post_list) post_list.abort();
            $filmList.addClass('-load');
            $filmList.find('.fla-table-box').removeClass('-none-al');
            $filmList.find('.fla--error').hide();

            post_list = $.post(
                '/films/analogs-by-param-filtered/' + $filmList.attr('data-film-id') + '/' + $filmList.attr('data-period-id') + '/',
                {
                    hiddenAnalogs: hiddenAnalogs,
                    // showAnalogs: showAnalogs // FONDKINO-1696
                }
            ).done(function (response) {

                $filmList.removeClass('-load');
                $filmList.find('.fla-table-box').html(response);

                if ( $filmList.find('.fla-table-box .fla-table > *').length == 1 ) {
                    $filmList.find('.fla-table-box').addClass('-none-al');
                    $filmList.find('.fla--error').show();
                }

                showAnalogsInSearch = getCurrentAnalogs();
            })
                .fail(function () {
                    $filmList.removeClass('-load');
                    $filmList.find('.fla-table-box').addClass('-none-al');
                    $filmList.find('.fla--error').show();
                });


        }


        $filmList.on('click', '.fla-table-del', function(){
            $(this).parent().remove();

            var filmId = $filmList.attr('data-film-id');
            var analogId = $(this).attr('data-analog-id');
            var periodId = $filmList.attr('data-period-id');

            if ( filmId &&  analogId && periodId) {
                $('.ag-item [data-id="' + analogId + '"]').remove();

                hiddenAnalogs.push(analogId);
                delete showAnalogs[ showAnalogs.indexOf(analogId) ];
                save();
                updateList();
            }
        });

        $filmList.on('click', '.js-analogs-reset', function(e){
            e.preventDefault();

            var filmId = $filmList.attr('data-film-id');
            var periodId = $filmList.attr('data-period-id');

            if ( filmId && periodId) {
                showAnalogs = [];
                hiddenAnalogs = [];
                save();
                updateList(true);
            }

        });

    });



}(jQuery);
;;(function($){
    "use strict";

    const
        CTX_LABEL_BLOCK_HEIGHT = 20,
        COLOR_LINE = '#8659ad',
        WIDTH_LINE = 2,
        CTX_LABEL_BLOCK_IMG = '/img/purple-buble.png',
        CTX_LABEL_COLOR = '#fff',
        CTX_LABEL_FONT = '400 10pt Arial',
        VIEW_PORT = 0.8;

    function Coord() {
        this.x = null;
        this.y = null ;
    }

    function BlockInColumnCoord() {
        this.first = null;
        this.second = null;
        this.third = null;
    }

    function GraphColumns( $parent ) {

        var t = this,
            canvas = $parent.find('canvas')[0],
            ctx = canvas.getContext('2d'),
            ctx_width,
            ctx_height,
            ctx_label_block_width;

        var
            col_width,
            col_height_ratio,
            min_value,
            max_value;

        var owner_params;

        t.getCoordLabels = function() {
            var res = [];

            t.values.map(function( e, i ){
                var c = new Coord();

                c.x = col_width * (i + 1) - col_width / 2;
                c.y = ctx_height * ( VIEW_PORT + 1 ) / 2 - col_height_ratio * ( e - min_value );

                res.push(c);
            });

            return res;
        }

        t.getCoordLines = function() {
            var res = [];

            t.getCoordLabels().map(function( e, i ){

                var c = new BlockInColumnCoord();

                c.first     = new Coord();
                c.second    = new Coord();
                c.third     = new Coord();

                c.third.y   = e['y'];
                c.third.x   = e['x'] + ctx_label_block_width / 2;

                c.second.y  = e['y'];
                c.second.x  = e['x'] - ctx_label_block_width / 2;

                //для китайцев: предыдущая координата или нуль
                if ( t.getCoordLabels()[ i - 1 ] ) {
                    c.first.x   = t.getCoordLabels()[ i - 1 ]['x'] + ctx_label_block_width / 2 ;
                    c.first.y   = t.getCoordLabels()[ i - 1 ]['y'];
                } else {
                    c.first.x   = 0;
                    c.first.y   = e['y'];
                }

                res.push(c);
            });

            return res;
        }

        t.setCtxStyleForLines = function() {
            ctx.strokeStyle = COLOR_LINE;
            ctx.fillStyle = COLOR_LINE;
            ctx.lineWidth = WIDTH_LINE;
            ctx.textAlign = 'left';
        }

        t.setCtxStyleForLabel = function() {
            ctx.fillStyle = CTX_LABEL_COLOR;
            ctx.font = CTX_LABEL_FONT;
            ctx.textAlign = 'center';
            ctx.textBaseline = 'middle';
        }

        t.draw = function( params ) {

            t.clear();
            t._init( params );
            t.setLegendLabels();

            //line and babel
            t.getCoordLines().map(function( e, i ){

                //line
                t.setCtxStyleForLines();
                ctx.beginPath();
                ctx.moveTo( e.first.x, e.first.y );
                ctx.lineTo( e.second.x, e.second.y );
                ctx.lineTo( e.third.x, e.third.y );
                ctx.stroke();

                //bubel
                var label_img = new Image();
                label_img.src = CTX_LABEL_BLOCK_IMG;
                label_img.onload = function(){
                    ctx.drawImage(
                        label_img,
                        e.second.x + ctx_label_block_width * 0.1,
                        e.second.y - CTX_LABEL_BLOCK_HEIGHT / 2,
                        ctx_label_block_width * 0.8,
                        CTX_LABEL_BLOCK_HEIGHT
                    );

                    //label
                    var max = max_value + (max_value-min_value) * (1 - VIEW_PORT) / 2 || 0;
                    if (max <= 1000) max = 0;
                    t.setCtxStyleForLabel();
                    ctx.fillText( $.lib.numberToFormatGraph( t.values[i].toFixed(1) , max, true ), e.third.x - ctx_label_block_width / 2, e.third.y );
                }

            })

            //last line
            t.setCtxStyleForLines();
            ctx.beginPath();
            ctx.moveTo( t.getCoordLines()[t.howMuchColumns-1].third.x, t.getCoordLines()[t.howMuchColumns-1].third.y );
            ctx.lineTo( ctx_width, t.getCoordLines()[t.howMuchColumns-1].third.y );
            ctx.stroke();

        }

        t.clear = function() {
            $parent.removeClass('-error');
            t.disableLoader();
            t.clearLegendLabels();

            ctx.clearRect(0, 0, ctx_width, ctx_height);
        }

        t.setLegendLabels = function() {
            var max = max_value + (max_value-min_value) * (1 - VIEW_PORT) / 2 || 0,
                min = min_value - (max_value-min_value) * (1 - VIEW_PORT) / 2 || 0,
                diff = max - min;

            min = min < 0 ? 0 : min;
            if (max <= 1000) max = 0;

            $parent.find('.gr2-left-title-1').text( $.lib.numberToFormatGraph( (min + diff).toFixed(1), max, true) );
            $parent.find('.gr2-left-title-2').text( $.lib.numberToFormatGraph( (min + diff * 0.75).toFixed(1), max, true) );
            $parent.find('.gr2-left-title-3').text( $.lib.numberToFormatGraph( (min + diff * 0.5).toFixed(1), max, true) );
            $parent.find('.gr2-left-title-4').text( $.lib.numberToFormatGraph( (min + diff * 0.25).toFixed(1), max, true) );
            $parent.find('.gr2-left-title-5').text( $.lib.numberToFormatGraph( (min).toFixed(1), max, true) );

            owner_params.titles.map(function(e,i){
                $parent.find('.gr2-bot-title-' + (i+1) ).text( e );
            })

        }

        t.clearLegendLabels = function() {
            $parent.find('[class*=gr2-bot-title-]').text('');
            $parent.find('.gr2-left-title-6').hide();
        }

        t._init = function( params ) {
            owner_params = params;

            ctx_width = $(canvas).width();
            ctx_height = $(canvas).height();
            t.values = params.values;
            t.howMuchColumns = t.values.length;

            //init local var
            min_value = Math.min.apply( Math, t.values );
            max_value = Math.max.apply( Math, t.values );

            //set size canvas tag
            $(canvas).attr('width', ctx_width );
            $(canvas).attr('height', ctx_height );

            //init local var
            col_width = ctx_width / t.howMuchColumns;
            col_height_ratio = ctx_height * VIEW_PORT / (max_value - min_value);
            ctx_label_block_width = col_width * 0.8;


            //set -col- class
            for (var i = 0; i < 20; i++)
                $parent.removeClass('-col-' + i);
            $parent.addClass('-col-' + params.values.length);

        }

        t.enableLoader = function() {
            $parent.removeClass('-error');
            $parent.addClass('-loaded');
        }
        t.disableLoader = function() {
            $parent.removeClass('-loaded');
        }
        t.displayError = function() {
            t.clear();
            $parent.addClass('-error');
            $parent.removeClass('-loaded');
        }

    }

    $(function(){
        $('.js-graph-columns').each(function(){
            var GC = new GraphColumns( $(this) )

            $(this).data('graph-columns', GC );

            $(this).on('draw',function(e, param){
                GC.draw(param);
            })
            $(this).on('enableLoader',function(){
                GC.enableLoader();
            })
            $(this).on('disableLoader',function(){
                GC.disableLoader();
            })
            $(this).on('displayError',function(){
                GC.displayError();
            })

        })
    })

}(jQuery));
;;(function($){
    "use strict";

    var TOP_OFFSET_SCALE = 1.115;

    function GraphStatisticSmall( $parent ) {
        var t = this;

        t.getValues = function( params ) {
            var res = [];
            var max = $.lib.max( params.values ) * TOP_OFFSET_SCALE;

            params.values.map(function(t){
                //интересное поведение 0
                res.push( Math.round( +t / max * 100 ) || 0 );
            });

            return res;
        }

        t.setLegendLabels = function( params ) {
            var max = $.lib.max(params.values) * TOP_OFFSET_SCALE;
            $parent.find('.gr1-left-title-1').text( $.lib.numberToFormatGraph( Math.round(max), max, true) );
            $parent.find('.gr1-left-title-2').text( $.lib.numberToFormatGraph( Math.round(max * 0.75), max, true) );
            $parent.find('.gr1-left-title-3').text( $.lib.numberToFormatGraph( Math.round(max * 0.5), max, true) );
            $parent.find('.gr1-left-title-4').text( $.lib.numberToFormatGraph( Math.round(max * 0.25), max, true) );
        }

        t.clearLegendLabels = function() {
            $parent.find('.gr1-left-title-1').text('');
            $parent.find('.gr1-left-title-2').text('');
            $parent.find('.gr1-left-title-3').text('');
            $parent.find('.gr1-left-title-4').text('');

            $parent.find('.gr1-left-title-6').hide();
            $parent.find('.gr1-left-title-6 > span').text('');
        }

        t.draw = function( params, length ) {

            var length = +length ? length : 12;

            $parent.find('.gr1-line').hide();
            $parent.find('.gr1-line').slice(0, length).show();

            t.clear();
            t.setLegendLabels(params);

            var sum_values = $.lib.sum( params.values );

            t.getValues(params).map(function(t, i){

                var percent_for_display = Math.round( params.values[i] / sum_values * 100 );

                if ( !percent_for_display ) percent_for_display = 0;

                $parent.find('.gr1-line > span')
                    .eq(i)
                    .height(t + '%');

                $parent.find('.gr1-line > span')
                    .eq(i)
                    .find(' > span')
                    .text( percent_for_display );

            })

        }

        t.enableLoader = function() {
            $parent.addClass('-loaded');
        }
        t.disableLoader = function() {
            $parent.removeClass('-loaded');
        }
        t.displayError = function() {
            t.clear();
            t.disableLoader();
            $parent.addClass('-error');
        }
        t.clear = function() {
            $parent.removeClass('-error');
            t.disableLoader();
            t.clearLegendLabels();

            $parent.find('.gr1-line > span')
                .height(0);

            $parent.find('.gr1-line > span')
                .find(' > span')
                .text( '' );
        }


        $parent.on('enableLoader',function() {
            t.enableLoader();
        })
        $parent.on('disableLoader',function() {
            t.disableLoader();
        })
        $parent.on('displayError',function() {
            t.displayError();
        })
        $parent.on('draw',function(e, p, l) {
            t.draw(p, l);
        })

    }

    function GraphStatisticSmallByValue( $parent ) {
        var t = this;
        GraphStatisticSmall.apply(this, arguments);

        t.draw = function( params ) {
            var max_value = $.lib.max(params.values);

            t.clear();
            t.setLegendLabels(params);

            t.getValues(params).map(function(t, j){

                var value = $.lib.numberToFormatGraph(params.values[j], max_value, false);

                $parent.find('.gr1-line > span')
                    .eq(j)
                    .height(t + '%');

                $parent.find('.gr1-line > span')
                    .eq(j)
                    .find(' > span')
                    .text( value );

            })

        }

    }

    $(function(){
        $('.graph-statistic._percent').each(function(){
            $(this).data('graph-statistic', new GraphStatisticSmall( $(this) ) );
        })
        $('.graph-statistic._value').each(function(){
            $(this).data('graph-statistic', new GraphStatisticSmallByValue( $(this) ) );
        })
    })

}(jQuery));
;;(function($){
    "use strict";

    function GraphStatisticBig( $parent ) {

        var t = this;

        if ( $parent.hasClass('-is-init') )
            return;

        $parent.addClass('-is-init');

        t.clear = function() {
            //$parent.find('.js-graph-statistic-scroll').data('jsp').destroy();
            $parent.find('.js-graph-statistic-big-sort__content').html('');
        }

        t.enableLoader = function() {
            $parent.addClass('-loaded');
        }
        t.disableLoader = function() {
            $parent.removeClass('-loaded');
        }
        t.displayError = function() {
            t.clear();
            t.disableLoader();
            $parent.addClass('-error');
        }
        t.draw = function() {
            t.resetSort();
            t.disableLoader();
            $parent.removeClass('-error');
        }
        t.show = function() {
            $parent.removeClass('-none');
        }
        t.hide = function() {
            $parent.addClass('-none');
        }
        t.resetSort = function() {
            $parent.find('.sort-control')
                .removeClass('_asc')
                .removeClass('_desc');
            $parent.find('.sort-control').eq(0)
                .addClass('_desc');
        }

        $parent.on('enableLoader',function() {
            t.enableLoader();
        })
        $parent.on('disableLoader',function() {
            t.disableLoader();
        })
        $parent.on('displayError',function() {
            t.displayError();
        })
        $parent.on('draw',function() {
            t.draw();
        })
        $parent.on('show',function() {
            t.show();
        })
        $parent.on('hide',function() {
            t.hide();
        })

        //sorting
        $parent.find('.js-graph-statistic-big-sort').each(function(){

            var t = $(this);

            t.find('.sort-control').on('click', function(e){
                e.preventDefault();
                var apply_asc = false;

                if ( $(this).hasClass('_desc') )
                    apply_asc = true;

                t.find('.sort-control')
                    .removeClass('_asc')
                    .removeClass('_desc');

                if ( apply_asc )
                    $(this).addClass('_asc');
                else
                    $(this).addClass('_desc');

                sorting_row( $(this).attr('href').replace('#','_'), apply_asc );

            });

            function sorting_row( sorting_class_columns, direct ) {

                var direct = direct ? -1 : 1;
                var $rows = $parent.find('.js-graph-statistic-big-sort__content > div');

                $parent.find('.js-graph-statistic-big-sort__content').html(
                    $rows.sort(function( a, b ){

                        var res = -1 * direct;

                        if (
                            +$(a).find( '.' + sorting_class_columns ).text().replace(/\s/g,'')
                            <
                            +$(b).find( '.' + sorting_class_columns ).text().replace(/\s/g,'')
                        )
                            res = 1 * direct;

                        return res;
                    })
                );
            }

        });
        $parent.find('.js-graph-statistic-scroll').jScrollPane({autoReinitialise: true, mouseWheelSpeed: 21});

    }

    $('body').on('init.graph-statistic-big', '.graph-statistic-big', function(){
        $(this).data('graph-statistic-big', new GraphStatisticBig( $(this) ) );
    })

    $(function(){
        $('.graph-statistic-big').each(function(){
            $(this).data('graph-statistic-big', new GraphStatisticBig( $(this) ) );
        })
    })

}(jQuery));
;const isStatistics = window.location.href.indexOf("statistics/") !== -1;// || window.location.pathname == "/";
const isRating = window.location.href.indexOf("rating/") !== -1;// || window.location.pathname == "/";
const isCompare = window.location.href.indexOf("compare/") !== -1;// || window.location.pathname == "/";
const START_DATE = '2015-01-01';
const START_DATE_MOMENT = moment(START_DATE, "YYYY-MM-DD");
const DAY_S = 24 * 60 * 60;
const DAY_MS = DAY_S * 1000;
const isFilmDetail = window.location.href.indexOf("films/detail/") !== -1;
const isIndexPage = window.location.pathname === "/";
const isBanner = window.location.pathname === "/banner/";
const startTime = $("#js-statistic-range-film").data("first-weekend");
let currenWeek = 0;

;(function($){
    'use strict';

    const selectControls = [];

    function preInitSelector($o, i) {
        if (isRating) {
            return null;
        }
        const params = {
            item: null,
            forAll: function (rangeyType, selectedId) {
                selectControls.forEach(function (selectControl) {
                    selectControl.setNewValueFrom(rangeyType, selectedId);
                })
            },
            // rangeType: "weekend",
            // selectedId: 112
            uid: 'f' + (~~(Math.random()*1e8)).toString(16)
        };

        if (isStatistics) {
            params.trigger = "getData";
            params.name = ".js-top-statistic-big-" + params.uid;
            params.triggerItemName = ".js-range-select"
            params.preData = true;
        }

        if (isCompare) {
            params.trigger = "changeComparablePeriods";
            params.name = "#js-select-compare-period";
            // params.preData = true;
        }

        if (isFilmDetail) {
            const id = $o.attr("id");
            switch (id) {
                case "js-statistic-range-film":
                    params.name = "#js-statistic-range-film";
                    params.trigger = "filmStatistic";
                    params.triggerItemName = ".js-range-select"
                    params.preData = true;
                    break;
                case "js-select-period-rospis":
                    params.name = "#js-select-period-rospis";
                    params.trigger = "filmRospis";
                    params.triggerItemName = ".js-range-select"
                    params.preData = true;
                    break;
            }

        }

        if(isIndexPage) {
            const id = $o.attr("id");
            switch (id) {
                case "js-statistic-range-index":
                    params.name = "#js-statistic-range-index";
                    params.trigger = "getDataIndexWidget";
                    params.triggerItemName = ".js-range-select"
                    params.preData = true;
                    break;
                case "js-dynamic-price-range":
                    params.name = "#js-dynamic-price-range";
                    params.trigger = "getGeneralStat";
                    params.triggerItemName = ".js-range-select";
                    params.preData = false;
                    break;
                case "js-dynamic-viewers-range":
                    params.name = "#js-dynamic-viewers-range";
                    params.trigger = "getGeneralStat";
                    params.triggerItemName = ".js-range-select";
                    params.preData = false;
                    break;
            }
        }
         if (isBanner) {
             params.name = "#js-statistic-range-index";
             params.trigger = "getDataIndexWidget";
             params.triggerItemName = ".js-range-select";
             params.preData = true;
         }

        const selectControl = new selectPeriodControl($o, params);
        selectControl.init();
        selectControls.push(selectControl)
    }

    $(document).on("initPeriodSelector", function (e, e2) {
        setTimeout(function () {
            $('.js-select-period').trigger('init')
        }, 10)
        $('.js-select-period:not(.-init)').each(function (i) {
            preInitSelector($(this), i);
        });
    });

    $(document).trigger("initPeriodSelector");

    $('body').on('init.js-select-period', '.js-select-period:not(.-init)', function(e, rangeType, current) {
        preInitSelector($(this));
    });

    function selectPeriodControl($selectorBlock, params) {
        const _this = this;
        const $next = $selectorBlock.find(".rs-next");
        const $prev = $selectorBlock.find(".rs-prev");
        // const $dropdown = $selectorBlock.find(".rs-dropdown")

        _this.isFirstLoad = true;

        _this.months = {
            short: ['янв.', 'февр.', 'мар.', 'апр.', 'мая', 'июн.', 'июл.', 'авг.', 'сент.', 'окт.', 'нояб.', 'дек.'],
            full: ['январь', 'февраль', 'март', 'апрель', 'май', 'июнь', 'июль', 'август', 'сентябрь', 'октябрь', 'ноябрь', 'декабрь'],
            dayOfMonth: ['января', 'февраля', 'марта', 'апреля', 'мая', 'июня', 'июля', 'августа', 'сентября', 'октября', 'ноября', 'декабря']
        };
        _this.values = {
            day: [],
            weekend: [],
            week: [],
            month: [],
            year: [],
            byWeekend: [],
            byWeek: []
        };
        _this.defaults = function () {
            let startPeriods = START_DATE_MOMENT;
            const firstWeekend = $selectorBlock.data("first-weekend");
            let rangeType = _this.rangeType ?
                _this.rangeType
                :  (
                    _this.getParameters.rangeType ?
                        _this.getParameters.rangeType
                        : $selectorBlock.find(".js-select option:first").attr("value")
                );
            const length = _this.values[rangeType] ? _this.values[rangeType].length : 0;
            let indexOfSelected = length - 1;
            if (isFilmDetail && firstWeekend) {
                startPeriods = moment(firstWeekend, "YYYY.MM.DDTHH:mm:ss");
                if (!isFollowed) {
                    indexOfSelected = 0;
                }
            }

            if ((isFilmDetail || isCompare) && _this.isFirstLoad) {
                const now = new Date();
                if (now.getDay() >= 0 && now.getDay() < 3) {
                    rangeType = 'weekend';
                } else {
                    rangeType = 'week';
                }
            }

            if(isCompare) {
                startPeriods = moment(moment().year() + "-01-01");
            }

            _this.isFirstLoad = false;

            return {
                startDate: startPeriods,
                endDate: moment(),
                rangeType: rangeType,
                selectedId: rangeType && length > 0 ? _this.values[rangeType][indexOfSelected].id : 1
            }
        };
        _this.getParameters = $.lib.getGet() ? $.lib.getGet() : {};
        _this.rangeType = _this.defaults().rangeType;
        _this.selectedId = _this.defaults().selectedId;

        _this.setValue = function() {
            const list = _this.values[_this.rangeType];
            try {
                var matches = list.filter(function (item) {
                    return item.id == _this.selectedId;
                });
            } catch (e) {
                console.error("Check range type", _this.rangeType)
                console.error(e)
            }

            $next.removeClass("-dis");
            $prev.removeClass("-dis");
            if (_this.selectedId == list.length || (list[list.length - 1] && list[list.length - 1].id == _this.selectedId)) {
                $next.addClass("-dis");
            }
            if (_this.selectedId == (list.length > 0 ? list[0].id : 1)) {
                $prev.addClass("-dis");
            }
            const value = matches.length === 1 ? matches[0].rangeTitle : "-";
            if (value && value.toString().toLowerCase() == "Invalid date".toLowerCase()) {
                console.error(value, matches, list, _this.values, _this.rangeType)
            }
            $selectorBlock.find(".rs-val").text(value);
            if (matches.length === 1 && params.name) {

                const data = {
                    getRangeResult: function () {
                        return {
                            'startMoment': matches[0].startPeriodMoment,
                            'endMoment': matches[0].endPeriodMoment,
                            'rangeType': _this.rangeType,
                            'type': _this.rangeType,
                            'start_date': matches[0].start_date,
                            'end_date': matches[0].end_date,
                            // 'year': st
                        }
                    }
                };
                if (params.preData) {
                    let $item = $(params.name);
                    if(params.triggerItemName) {
                        $item = $item.find(params.triggerItemName);
                    }
                    $item.data("SelectRange", data);
                    setTimeout(function(){
                        $item.trigger(params.trigger);
                    }, 10);

                } else {
                    setTimeout(function () {
                        let $item = $(params.name);
                        if(params.triggerItemName) {
                            $item = $item.find(params.triggerItemName);
                        }
                        $item.trigger(params.trigger, data.getRangeResult());
                    },10);
                }
            }
        };

        _this.setNewValueFrom = function (rangeType, selectedId){
            _this.selectedId = selectedId;
            _this.setLabel(rangeType);
            $selectorBlock.find(".sp-control-for-all__for-all").prop("checked", false)
            _this.setValue();
        };

        _this.setLabel = function(rangeType) {
            if (rangeType) {
                _this.rangeType = rangeType;
            } else {
                rangeType = _this.rangeType;
            }

            $selectorBlock.find('.js-select option[value=' + rangeType + ']').prop("selected", true);
            $selectorBlock.find('.js-select').trigger('js-select-change');
        };

        _this.init = function() {
            if (!params) {
                params = {
                    rangeType:  _this.defaults().rangeType
                }
            }
            params.name = params.name ? params.name : "";
            _this.initValues();
            _this.rangeType = params.rangeType ? params.rangeType : _this.defaults().rangeType;
            _this.selectedId = params.selectedId ? params.selectedId : _this.getSelectedIdFromRange();
            $selectorBlock.show();
            $selectorBlock.find('.js-select option[value=' + _this.rangeType + ']').prop("selected", true);
            $selectorBlock.find('.js-select').trigger('init.js-select');
            const className = params.name.replace("-" + params.uid, "");
            $selectorBlock.parents(className).removeClass(className).addClass(params.name.replace(".", ""));
            $selectorBlock.addClass("-init");
            _this.setValue();
            $next.data("diff", 1);
            $prev.data("diff", -1);
            $next.on("click", _this.shiftValue);
            $prev.on("click", _this.shiftValue);
            $selectorBlock.find(".sp-select-type").on("change", _this.changeRangeHandler);
            $selectorBlock.find(".rs-val").on("click", _this.toggleDropdown);
            window.onclick = _this.closeDropdown;
            $selectorBlock.find(".sp-control-for-all__for-all").on("change", _this.handleCheckbox);
        };

        _this.handleCheckbox = function(e){
            if ($(e.target).prop("checked")) {
                params.forAll(_this.rangeType, _this.selectedId);
            }
        };

        _this.closeDropdown = function($dd) {
            if ($dd && $dd.target && $dd.target.className.indexOf("rs-val") !== -1) {
                return true;
            }
            const $dropdown = $dd && !$dd.target ? $dd : $(".rs-dropdown");
            $dropdown.hide();
        };

        _this.toggleDropdown = function(event){
            const $_selectorBlock = $(event.target).parents(".js-select-period.-init");
            const $dropdown = $_selectorBlock.find(".rs-dropdown");
            const $_prev = $_selectorBlock.find(".rs-prev");
            const $_next = $_selectorBlock.find(".rs-next");

            if ($dropdown.is(":visible")) {
                _this.closeDropdown($dropdown);
                setTimeout(function () {

                },100)
            } else if (
                !(
                    $_prev.hasClass('-dis') && $_next.hasClass('-dis')
                ) && event.target.className.indexOf("rs-val") !== -1
            ){
                _this.openDropdown($dropdown);
            }
        };

        _this.openDropdown = function($dd){
            _this.closeDropdown();
            setTimeout(function () {
                const $dropdown = $dd ? $dd : $selectorBlock.find(".rs-dropdown");
                const items = _this.values[_this.rangeType].map(function (item) {
                    return '<span data-current="' + item.id +'" class="' + (item.id == _this.selectedId ? "-act" : "") + '">' + item.rangeTitle + '</span>';
                });
                $dropdown.html(items.reverse().join(""));
                $dropdown.show();
                $dropdown.find("[data-current]").on("click", _this.changePeriodHandler);
            }, 0)
        };

        _this.changeRangeHandler = function(e){
            _this.rangeType = e.target.value;
            _this.selectedId = _this.defaults().selectedId;
            _this.setValue();
        };

        _this.changePeriodHandler = function(e){
            _this.selectedId = $(e.target).data("current");
            _this.setValue();
        };

        _this.shiftValue = function(e){
            const $target = $(e.target);
            if (!$target.hasClass("-dis")) {
                _this.selectedId = parseInt(_this.selectedId) + $target.data("diff");
                _this.setValue();
            }
        };

        _this.initValues = function() {
            _this.values = {
                day: _this.getDays(),
                weekend: _this.getWeekends(),
                week: _this.getWeeks(),
                month: _this.getMonths(),
                year: _this.getYears(),
                byWeekend: _this.getCustomPeriods((34 * DAY_S), "byWeekend"),
                byWeek: _this.getCustomPeriods((34 * DAY_S), "byWeek")
            };
        };

        _this.getCustomPeriods = function(step, rangeType){
            function getPrevWknd( objWknd ) {
                return this.isAfter( objWknd.endPeriodMoment, 'day');
            }
            function getMaxWknd(prevWkndID, objWknd) {
                return objWknd.id > prevWkndID ? objWknd.id : 0;
            }
            
            if (!step || typeof step !== "string") {
                step = "month";
            }
            if (!rangeType) {
                rangeType = "byWeekend"
            }
            const periods = [];
            const currentDayOfTheWeek = moment().day();
            let endDate;
            if (rangeType === "byWeekend") {
                if (currentDayOfTheWeek === 0) {
                    endDate = moment();
                } else {
                    let arrPrevWknds = _this.getWeekends().filter( getPrevWknd, moment() );
                    let idPrevWknd = arrPrevWknds.reduce(getMaxWknd, 0);
                    let prevWknd = arrPrevWknds.filter( function( objWknd ) { return (objWknd.id == idPrevWknd ? true : false) } );
                    if ( prevWknd != undefined && prevWknd.length == 1 ){
                        endDate = prevWknd[0].endPeriodMoment;
                    } else {
                        endDate = moment().startOf("week");
                    }
                }
            } else if (rangeType === "byWeek") {
                if (currentDayOfTheWeek >= 3) {
                    endDate = moment().startOf("isoWeek").day(3);
                } else {
                    endDate = moment().startOf("isoWeek").subtract(1, "week").day(3)
                }
            } else {
                return [];
            }
            const startDate = _this.defaults().startDate;

            let i = 0;

            function addPeriod (en){
                const st = en.clone().subtract(7 * 4 + 6, "day");
                if(st.isAfter(startDate) || st.isSame(startDate)) {
                    periods.push({
                        'start_date': st.format("YYYY-MM-DD"),
                        'end_date': en.format("YYYY-MM-DD"),
                        'rangeType': rangeType,
                        'id': i + 1,
                        'rangeTitle': st.format( "DD.MM.YYYY") + " - " + en.format("DD.MM.YYYY"),
                        'startPeriodMoment': st,
                        'endPeriodMoment': en,
                    });
                    i++;
                    
                    addPeriod(moment(st).subtract(1, "day"));
                }
            }
			
            function addPeriodWeekend (en){
				let arrWknds = _this.getWeekends().filter( getPrevWknd, en );
				let idWknd = arrWknds.reduce(getMaxWknd, 0);
				let idPrevWknd = idWknd - 3;
				if( idPrevWknd < 1 )
					idPrevWknd = 1;
				let prevWknd = arrWknds.filter( function( objWknd ) { return (objWknd.id == idPrevWknd ? true : false) } );
				if(prevWknd.length == 1 ) {
					const st = prevWknd[0].startPeriodMoment;
					if(st.isAfter(startDate) || st.isSame(startDate)) {
						periods.push({
							'start_date': st.format("YYYY-MM-DD"),
							'end_date': en.format("YYYY-MM-DD"),
							'rangeType': rangeType,
							'id': i + 1,
							'rangeTitle': st.format( "DD.MM.YYYY") + " - " + en.format("DD.MM.YYYY"),
							'startPeriodMoment': st,
							'endPeriodMoment': en,
						});
						i++;
						
						idPrevWknd = idPrevWknd - 1;
						if (idPrevWknd >= 1) {
							prevWknd = arrWknds.filter( function( objWknd ) { return (objWknd.id == idPrevWknd ? true : false) } );
							if(prevWknd.length == 1 ) {
								addPeriodWeekend(moment(prevWknd[0].endPeriodMoment));
							}
						}
					}
				}
            }
			
			if(rangeType === "byWeekend") {
				addPeriodWeekend(endDate);
			} else {
				addPeriod(endDate);
			}

            return periods.reverse().map(function(item, i){
                const res = item;
                res.id = i + 1;

                return res;
            });
        };

        _this.getDays = function(){
            const days = [];
            const start = _this.defaults().startDate;
            const end = _this.defaults().endDate;
            const lengthDiff = end.diff(start, "days");
            const startUnix = start.unix();

            for (let i = 0; i <= lengthDiff; i++) {
                const day = startUnix + (DAY_S * i);
                const dayMoment = moment.unix(day);
                const month = _this.months.short[dayMoment.format("M") - 1];

                days.push({
                    'rangeType': "day",
                    'id': i + 1,
                    'rangeTitle': dayMoment.format( "DD " + month + " YYYY г."),
                    'startPeriodMoment': dayMoment,
                    'endPeriodMoment': dayMoment,
                    'start_date': $.lib.date.dateToSimpleISO(day * 1000),
                    'end_date': $.lib.date.dateToSimpleISO(day * 1000)
                });
            }

            return days;
        };

        _this.getYears = function(){
            const years = [];
            const startYear = _this.defaults().startDate.year();
            const endYear = _this.defaults().endDate.year();

            for(let i = startYear; i <= endYear; i++) {
                const start = moment(i, "YYYY");
                const end = moment(i, "YYYY").add(1, "year").subtract(1, "day");
                years.push({
                    'start_date': start.format("YYYY-MM-DD"),
                    'end_date': end.format("YYYY-MM-DD"),
                    'rangeType': "week",
                    'id': i,
                    'rangeTitle': i,
                    'startPeriodMoment': start,
                    'endPeriodMoment': end,
                });
            }
            return years;
        };

        _this.getMonths = function(){
            const start = _this.defaults().startDate;
            const startUnix = start.unix();
            const end = _this.defaults().endDate;
            const monthsLength = end.diff(start, "month");
            const months = [];
            for (let i = 0; i <= monthsLength; i++ ){
                const st = moment.unix(startUnix).add(i, "month");
                const en = moment.unix(startUnix).add(i + 1, "month").subtract(1, "day");
                months.push({
                    'start_date': st.format("YYYY-MM-DD"),
                    'end_date': en.format("YYYY-MM-DD"),
                    'rangeType': "week",
                    'id': i + 1,
                    'rangeTitle': st.format( "DD.MM") + " - " + en.format("DD.MM.YYYY"),
                    'startPeriodMoment': st,
                    'endPeriodMoment': en,
                });
            }

            return months;
        };

        _this.getWeeks = function(){

            const timeStartUnix = _this.defaults().startDate.unix();
            let startShift = 0;//_this.defaults().startDate.day() - (4 * DAY_S);
            if(isCompare) {
                const year = moment().year();
                const firstDayOfYear = moment("01.01." + year, "DD.MM.YYYY");
                startShift = (3 + firstDayOfYear.day()) * DAY_S;
            }
            const start = timeStartUnix - startShift;
            const end = _this.defaults().endDate.unix();
            const weeks = [];
            let i = 0;

            function addWeek(st, en) {
                if (st <= end){
                    weeks.push({
                        'start_date': moment.unix(st).format("YYYY-MM-DD"),
                        'end_date': moment.unix(en).format("YYYY-MM-DD"),
                        'rangeType': "week",
                        'id': i + 1,
                        'rangeTitle': moment.unix(st).format( "DD.MM") + " - " + moment.unix(en).format("DD.MM.YYYY"),
                        'startPeriodMoment': moment.unix(st),
                        'endPeriodMoment': moment.unix(en),
                    });
                    i++;
                    addWeek(en + (1 * DAY_S), en + (7 * DAY_S));
                }
            }
            addWeek(start, start + (6 * DAY_S));

            return weeks;
        };

        _this.getWeekends = function() {
            function getWeekends() {
                const $weekendJsonElement = $("#weekend-json");
                if(!$weekendJsonElement) {
                    return [];
                }

                if($weekendJsonElement.text() === "") {
                    return [];
                }
                const weekends = JSON.parse($weekendJsonElement.text());

                if(Array.isArray(weekends)) {
                    return weekends;
                }

                return [];
            }

            const start = _this.defaults().startDate;
            const end = _this.defaults().endDate;

            return getWeekends().filter(function (weekend) {
                const weekendStart = moment(weekend.dateStart, "YYYY.MM.DDTHH:mm:ss");
                const weekendEnd = moment(weekend.dateEnd, "YYYY.MM.DDTHH:mm:ss");

                return (
                    (
                        weekendStart.isBefore(end)
                        || weekendStart.isSame(end)
                    ) && (
                        weekendEnd.isAfter(start)
                        || weekendEnd.isSame(start)
                    )

                );
            }).map(function (weekend) {
                const start = moment(weekend.dateStart, "YYYY.MM.DDTHH:mm:ss");
                const end = moment(weekend.dateEnd, "YYYY.MM.DDTHH:mm:ss");

                return ({
                    'rangeType': "weekend",
                    'id': weekend.id,
                    'rangeTitle': start.format( "DD.MM") + " - " + end.format("DD.MM.YYYY"),
                    'startPeriodMoment': start,
                    'endPeriodMoment': end,
                    'start_date': start.format("YYYY-MM-DD"),
                    'end_date': end.format("YYYY-MM-DD")
                });
            });
        };

        _this.getSelectedIdFromRange = function () {
            if (!_this.getParameters.start_date || !_this.getParameters.end_date) {
                return  _this.defaults().selectedId;
            }
            const list = _this.values[_this.rangeType];
            const matches = list.filter(function (item) {
                return (
                    item.startPeriodMoment.format("YYYY-MM-DD") === _this.getParameters.start_date
                    && item.endPeriodMoment.format("YYYY-MM-DD") === _this.getParameters.end_date
                );
            });

            if (matches.length !== 1) {
                return  _this.defaults().selectedId;
            }

            return  matches[0].id;
        }
    }
}(jQuery));;;!function($) {
    'use strict';

    function endingOfNumber(number, titles) {
        //one{регион} two{региона} zero{регионов}
        var cases = [0, 1, 2, 2, 2, 0];
        return titles[ ( number % 100>4 && number % 100<20 )? 0 : cases[ (number % 10<5) ? number % 10 : 5 ] ];
    }

    $('.select-regions').each(function(){

        var t = $(this),
            $body = $('body'),
            $btn = t.find('.lr-btn'),
            $btn_reset = t.find('.lr-btn-clear'),
            $popup = t.next('.select-regions-popup'),
            $popup_clear = $popup.find('.sr-search-reset'),
            $popup_close = $popup.find('.sr-close'),
            $popup_apply = $popup.find('.sr-apply'),
            $list_regions = $popup.find('[data-region-id]'),
            $box_selected_regions = t.find('.lr-regions-box'),
            $hidden = t.find('.select-regions-value'),
            $search_field = $popup.find('.sr-search [type="text"]'),
            $header_selected_num = $('.sr-head-selected > .__num',  $popup),
            $header_selected_ending = $('.sr-head-selected > .__ending',  $popup),
            $header_select_all = $('.sr-head-select-all',  $popup);

        var tmpl_selected_regions = "<span data-region-id class=\"lr-region\" title><span></span></span>";


        $popup_apply.on('click', function(e){
            e.preventDefault();
            popup_hide();
            setTimeout(function () {
                $(document).trigger("initPeriodSelector", e);
            }, 10);
            set_hidden();
            set_box_selected_regions();
        });

        $popup_close.on('click', function(e){
            e.preventDefault();
            popup_hide();
        });

        $btn.on('click', function(){
            popup_show();
        });

        $popup_clear.on('click', function(){
            $hidden.val('');
            $list_regions.removeClass('-act');
            popup_set_header();
        });

        $list_regions.on('click', function( e ){
            e.stopPropagation();
            $(this).toggleClass('-act');

            popup_set_header();
        });

        $box_selected_regions.on('click', '.lr-region',function(){
            remove_idRegions_from_hidden( $(this).attr('data-region-id') );
            $(this).remove();
            t.trigger('change');

            display_clear_btn();
        });

        $btn_reset.on('click', function(){
            $hidden.val('');
            $list_regions.removeClass('-act');
            set_box_selected_regions();
            display_clear_btn();
            t.trigger('change');
        });

        $search_field.on('keyup', function(){

            var t = $(this);

            if ( t.val() ) {

                $popup.find('ul > li').each(function(){
                    $(this).text().toLowerCase().indexOf( t.val().toLowerCase() ) == -1 ? $(this).addClass('-none') : $(this).removeClass('-none');
                })

            } else $popup.find('ul > li').removeClass('-none');

            if ( $popup.find('ul > li').length == $popup.find('ul > li.-none').length ) {
                $popup.addClass('-empty');
            } else {
                $popup.removeClass('-empty');
            }
        })

        $header_select_all.on('click', function(){
            $popup.find('[data-region-id]').addClass('-act');
            set_hidden();
            popup_set_header();
        });

        function popup_show() {

            $list_regions.removeClass('-act');
            var active = $hidden.val().split(',');

            active.map(function( a ){
                $popup.find('[data-region-id="' + a + '"]').addClass('-act');
            });

            $popup.removeClass('-none');
            $body.addClass('-hid');

            popup_set_header();

        }

        function popup_hide() {
            $popup.addClass('-none');
            $body.removeClass('-hid');
        }

        function popup_set_header() {
            var num = $list_regions.filter('.-act').size();
            var endings = $header_selected_ending.attr('data-endings')
                .split(' ').splice(2,3);

            endings.map(function(t, i){
                endings[i] = t.replace(/(zero|one|two|few|many|other)\{|\}/g,'');
            });

            $header_selected_num.text( num );
            $header_selected_ending.text( endingOfNumber( num, endings ) );
        }

        function set_hidden() {
            var hidden_value = ',';

            $list_regions.each(function(){
                if ( $(this).hasClass('-act') )
                    hidden_value = hidden_value + $(this).attr('data-region-id') + ',';
            });

            $hidden.val( hidden_value );
            setTimeout(function(){
                t.trigger('change');
            }, 10);
        }

        function set_box_selected_regions() {

            $box_selected_regions.html('');

            $list_regions.each(function(){
                if ( $(this).hasClass('-act') ) {

                    var $region = $(tmpl_selected_regions);
                    $region.find('span').text( $(this).text() );
                    $region.attr('data-region-id', $(this).attr('data-region-id') );

                    $region.find('span').attr('title', $(this).text() );
                    $box_selected_regions.append($region);

                }
            });

            display_clear_btn();
        }

        function remove_idRegions_from_hidden(id) {
            $hidden.val( $hidden.val().replace(',' + id + ',',',') );
        }

        function display_clear_btn() {

            if ( $box_selected_regions.find('>*').length )
                $btn_reset.removeClass('-none');
            else
                $btn_reset.addClass('-none');

        }

        function part_lay_ul() {
            $popup.find('ul').before('<ul />');
            $popup.find('ul').eq(0).append( $popup.find('ul > li').slice(0, Math.ceil( $popup.find('ul > li').length/2 ) ) );
        }

        function selectActive() {

            var get = $.lib.getGet();

            if ( get.regionId ) {
                $hidden.val( get.regionId );

                $list_regions.parent()
                    .find('[data-region-id="' + get.regionId + '"]')
                    .addClass('-act');

                set_box_selected_regions();
                $(function(){
                    t.trigger('change');
                });
            }

        }


        //run
        part_lay_ul();
        selectActive();
    });

}(jQuery);;;(function($){
    'use strict';

    //ready
    $(function(){

        $('body').on('click', '.js-load-more', function( e ){

            e.preventDefault();

            var t = $(this),
                param = JSON.parse( t.attr('data-param') );

            param = $.lib.add_csrf( param );
            param.scrollTop = $(document).scrollTop();
            param.page = t.attr('data-page');

            $('body').addClass('-container-load')
            $.post( param.url, param)
                .success(function( data ){

                    $( param.container ).append( data );
                    t.attr('data-page', +t.attr('data-page') + 1 );

                    if ( param.masonry ) {
                        var param_for_masonry = {};
                        param_for_masonry.scrollTop = param.scrollTop;
                        $.lib.masonry( param.container , param_for_masonry );
                    }

                    if ( $( param.container).find('.last-label').size() ) {
                        t.hide();
                    }

                })
                .error(function(){
                    $.lib.alert({
                        'id': 'alert-load-news',
                        'head': t.attr('data-msg-head'),
                        'text': t.attr('data-msg-error'),
                        'error': 1
                    });
                })
                .always(function(){
                    $('body').removeClass('-container-load')
                });
        });

    });
}(jQuery));
;function renderMovieData(data) {
    const mdDataWrapper = $('.js-md-data');

    function getNormalizedDate(dateFromApi) {
        return dateFromApi.replace(/^(\d{4})\.(\d{2})\.(\d{2})T.+/, '$3.$2.$1');
    }

    mdDataWrapper.html(
        '           <div class="md__top-row">' +
        '                <div class="md__top-col">' +
        '                    <div class="md__top-item">' +
        '                        <span class="md__top-label">Дата релиза</span>' +
        '                        <span class="md__top-value">' + (data.launch_date ? getNormalizedDate(data.launch_date) : '&mdash;') + '</span>' +
        '                    </div>' +
        '                    <div class="md__top-item">' +
        '                        <span class="md__top-label">Превью с</span>' +
        '                        <span class="md__top-value">' + (data.presalesStart ? getNormalizedDate(data.presalesStart) : '&mdash;') + '</span>' +
        '                    </div>' +
        '                </div>' +
        '                <div class="md__top-col">' +
        '                    <div class="md__top-item">' +
        '                        <span class="md__top-label">Номер ПУ</span>' +
        '                        <span class="md__top-value">' + (data.id ? data.id : '&mdash;') + '</span>' +
        '                    </div>' +
        '                    <div class="md__top-item">' +
        '                        <span class="md__top-label">Дистрибьютор</span>' +
        '                        <span class="md__top-value">' + (data.distributor ? data.distributor : '&mdash;') + '</span>' +
        '                    </div>' +
        '                </div>' +
        '                <div class="md__top-col">' +
        '                    <div class="md__top-item">' +
        '                        <span class="md__top-label">Общие сборы</span>' +
        '                        <span class="md__top-value js-digit-discharge">' + (data.money ? data.money : '&mdash;') + '</span>' +
        '                    </div>' +
        '                    <div class="md__top-item">' +
        '                        <span class="md__top-label">Сборы за превью</span>' +
        '                        <span class="md__top-value js-digit-discharge">' + (data.presales ? data.presales : '&mdash;') + '</span>' +
        '                    </div>' +
        '                </div>' +
        '                <div class="md__top-col">' +
        '                    <div class="md__top-item">' +
        '                        <span class="md__top-label">Зрители</span>' +
        '                        <span class="md__top-value js-digit-discharge">' + (data.tickets ? data.tickets : '&mdash;') + '</span>' +
        '                    </div>' +
        '                    <div class="md__top-item">' +
        '                        <span class="md__top-label">Сеансы</span>' +
        '                        <span class="md__top-value js-digit-discharge">' + (data.seances ? data.seances : '&mdash;') + '</span>' +
        '                    </div>' +
        '                </div>' +
        '            </div>'
    )



}

function renderMDGraph ($el, data, type) {

    let maxValueInType = 0;

    data.map(function (item) {
        item.data[type] > maxValueInType
            ? maxValueInType = item.data[type] : ''
    });

    $el.html(
        '               <div class="swiper-container js-movie-graph-container">' +
        '                    <div class="swiper-wrapper">' +
        '                        <div class="md-graph__wrapper swiper-slide">' +
        '                            <div class="md-graph__section">' +
        '                                <div class="md-graph__body">' +
        data.map(function(item) {
            const data = item.data;

            return '' +
                '<div class="md-graph__column js-graph-column" style="height: ' + data[type] / (maxValueInType / 100) + '%">' +
                '  <span class="md-graph__delta">' + (data[type + '_delta'] ? Math.round(data[type + '_delta']) + '%' : '') + '</span>' +
                '</div>'
        }).join('') +
        '                                </div>' +
        '                                <div class="md-graph__labels">' +
        data.map(function(item) {
            return '<span class="md-graph__label">' +
                (item.date_start === item.date_end
                    ? item.date_end.replace(/\d{2}(\d{2})\.(\d{2})\.(\d{2})/, '$3.$2.$1')
                    : item.date_start.replace(/(\d{4})\.(\d{2})\.(\d{2})/, '$3.$2') +
                    '-' + item.date_end.replace(/\d{2}(\d{2})\.(\d{2})\.(\d{2})/, '$3.$2.$1')) +
                '</span>'
        }).join('') +
        '                                </div>' +
        '                            </div>' +
        '                        </div>' +
        '                    </div>' +
        '                    <div class="swiper-navigation">' +
        '                        <div class="swiper-btn swiper-backward swiper-btn_disabled"></div>' +
        '                        <div class="swiper-scrollbar"></div>' +
        '                        <div class="swiper-btn swiper-forward"></div>' +
        '                    </div>' +
        '                </div>'
    )
}

function renderMDTable($el, data, launch_date) {
    $el.html(
        data.map(function(row) {

            $('.js-md-table-title').each(function(index, item) {
                let hasMatch = false;

                for (key in row.data) {
                    $(item).data('type') === key ? hasMatch = true : '';
                }

                !hasMatch
                    ? $(item).closest('.md-table__col').hide()
                    : $(item).closest('.md-table__col').show();
            });

            const previewPeriod = moment(row.date_start, "YYYY.DD.MM").unix() < moment(launch_date, "YYYY.MM.DDTHH:mm:ss").unix() ?
                '<span style="font-size: .6em; opacity: .8;">Период превью</span>'
                : "";

            return '' +
                '<div class="md-table__row">' +

                '<div class="md-table__col">' +
                '<span class="md-table__date">' +
                row.date_start.replace(/(\d+)\.(\d+)\.(\d+)/, '$3.$2') + '-' +
                row.date_end.replace(/(\d+)\.(\d+)\.(\d+)/, '$3.$2.$1') +
                '</span>' +
                previewPeriod +
                '</div>' +

                '<div class="md-table__col md-table__col-wrapper" style="' + (!row.data.sum ? 'display: none' : '') + '">' +
                '<span class="md-table__text js-bitwise-digit">' + Math.floor(row.data.sum) + '</span>' +
                (row.data.sum_delta ?
                    '<div>' +
                    '<span class="md-table__delta' + (row.data.sum_delta > 0 ? " md-table__delta_up" : " md-table__delta_down") + '"></span>' +
                    '<span class="md-table__delta-count">' + Math.round(row.data.sum_delta) + '%</span>' +
                    '</div>'
                    : '') +
                '</div>'+

                '<div class="md-table__col md-table__col-wrapper" style="' + (!row.data.tickets ? 'display: none' : '') + '">' +
                '<span class="md-table__text js-bitwise-digit">' + Math.floor(row.data.tickets) + '</span>' +
                (row.data.tickets_delta ?
                    '<div>' +
                    '<span class="md-table__delta' + (row.data.tickets_delta > 0 ? " md-table__delta_up" : " md-table__delta_down") + '"></span>' +
                    '<span class="md-table__delta-count">' + Math.round(row.data.tickets_delta) + '%</span>' +
                    '</div>'
                    : '') +
                '</div>' +

                '<div class="md-table__col md-table__col-wrapper" style="' + (!row.data.sessions ? 'display: none' : '') + '">' +
                '<span class="md-table__text js-bitwise-digit">' + Math.floor(row.data.sessions) + '</span>' +
                (row.data.sessions_delta ?
                    '<div>' +
                    '<span class="md-table__delta' + (row.data.sessions_delta > 0 ? " md-table__delta_up" : " md-table__delta_down") + '"></span>' +
                    '<span class="md-table__delta-count">' + Math.round(row.data.sessions_delta) + '%</span>' +
                    '</div>'
                    : '') +
                '</div>' +

                '<div class="md-table__col md-table__col-wrapper" style="' + (!row.data.money_per_session ? 'display: none' : '') + '">' +
                '<span class="md-table__text js-bitwise-digit">' + Math.floor(row.data.money_per_session) + '</span>' +
                (row.data.money_per_session_delta ?
                    '<div>' +
                    '<span class="md-table__delta' + (row.data.money_per_session_delta > 0 ? " md-table__delta_up" : " md-table__delta_down") + '"></span>' +
                    '<span class="md-table__delta-count">' + Math.round(row.data.money_per_session_delta) + '%</span>' +
                    '</div>'
                    : '') +
                '</div>' +

                '<div class="md-table__col md-table__col-wrapper" style="' + (!row.data.tickets_per_session ? 'display: none' : '') + '">' +
                '<span class="md-table__text js-bitwise-digit">' + Math.floor(row.data.tickets_per_session) + '</span>' +
                (row.data.tickets_per_session_delta ?
                    '<div>' +
                    '<span class="md-table__delta' + (row.data.tickets_per_session_delta > 0 ? " md-table__delta_up" : " md-table__delta_down") + '"></span>' +
                    '<span class="md-table__delta-count">' + Math.round(row.data.tickets_per_session_delta) + '%</span>' +
                    '</div>'
                    : '') +
                '</div>' +


                '<div class="md-table__col md-table__col-wrapper" style="' + (!row.data.money_per_ticket ? 'display: none' : '') + '">' +
                '<span class="md-table__text js-bitwise-digit">' + Math.floor(row.data.money_per_ticket) + '</span>' +
                (row.data.money_per_ticket_delta ?
                    '<div>' +
                    '<span class="md-table__delta' + (row.data.money_per_ticket_delta > 0 ? " md-table__delta_up" : " md-table__delta_down") + '"></span>' +
                    '<span class="md-table__delta-count">' + Math.round(row.data.money_per_ticket_delta) + '%</span>' +
                    '</div>'
                    : '') +
                '</div>' +

                '<div class="md-table__col">' +
                '<span class="md-table__text">' + row.data.period_number + '</span>' +
                '</div>' +
                '</div>'
        }).join('')
    );
}
;;(function($) {

    const $mdGraph = $('.js-md-graph');
    if (!$mdGraph.length) { return; }

    const $mdTable = $('.js-md-table-body');
    const $mdTableTitles = $('.js-md-table-title');
    const $mdTableHeadCols = $('.md-table__head .md-table__col');
    const currentMovieId = window.location.href.match(/\/\d+\/?$/g)[0].match(/\d+/)[0];
    const $mdDisplayWrapper = $('.js-md-display');
    const $mdDisplayBtns = $mdDisplayWrapper.find('.js-md-display-btn');
    let dateStart = null,
        dateEnd = null;

    let $movieGraphContainer = $('.js-movie-graph-container');

    initSwiper($movieGraphContainer);
    setDigitDischarge();
    getMovieData(currentMovieId);

    $mdTableTitles.each(function (index, title) {
        $(title).on('click', function (e) {
            const $target = $(e.target).closest('.js-md-table-title');

            if ($target.hasClass('md-table__title_active')) return;

            $mdTableTitles.each(function (index, item) {
                $(item).removeClass('md-table__title_active');
            });

            $target.addClass('md-table__title_active');
            render();
        })
    });

    $mdDisplayBtns.on('click', function (e) {
        const $target = $(e.target).closest('.js-md-display-btn');
        if (!$target || $target.hasClass('md__display-item_active')) return;

        const $sortParam = $target.data('display');
        setActiveDisplayBtn($sortParam);
    });

    function render(advData) {

        const apiBase = '/api/v2';

        const $activeTypeEl = $('.md-table__title_active');
        const activeColKey = getColKey($activeTypeEl, $mdTableHeadCols);
        const type = $activeTypeEl.data('type');

        const groupingType = $('.js-md-display-btn.md__display-item_active').data('display');

        let params = {
            date_start: dateStart,
            date_end: dateEnd,
            sort_type: type,
            grouping: groupingType,
            movie_id: currentMovieId
        };

        function joinApiLink(params) {
            let link = '';
            for (key in params) {
                params[key]
                    ? link += key + '=' + params[key] + '&' : '';
            }
            return '/rating?' + link
        }

        $.ajax({
            url: apiBase + joinApiLink(params),
            beforeSend: function () {
                $mdGraph.html('<div class="md-graph__loading"></div>');
                $mdTable.html('<div class="md-table__loading"></div>');
                $('.md-table__head').addClass('md-table__head_disable');
                $mdDisplayWrapper.addClass('md__display_disable');
            },
            success: function (response) {
                renderMDGraph($mdGraph, response, type);
                renderMDTable($mdTable, response, advData.movieInfo.launch_date);

                $('.md-table__head').removeClass('md-table__head_disable');
                $mdDisplayWrapper.removeClass('md__display_disable');

                $movieGraphContainer = $('.js-movie-graph-container');

                initSwiper($movieGraphContainer);
                setColClassByKey(activeColKey);
                setDigitDischarge();
            },
            error: function (jqXHR) {
                if (jqXHR.status !== 200) {
                    renderServerError($('.movie-page'), jqXHR.status)
                }
            }
        });
    }

    function setActiveDisplayBtn(type) {
        const $shouldSetActive = $('.js-md-display-btn[data-display="' + type + '"]');

        $.each($mdDisplayBtns, function (index, item) {
            $(item).removeClass('md__display-item_active');
        });

        $shouldSetActive.addClass('md__display-item_active');

        $mdGraph.removeClass('md-graph_day');
        $mdGraph.removeClass('md-graph_week');
        $mdGraph.removeClass('md-graph_weekend');
        $mdGraph.addClass('md-graph_' + type);

        render();
    }

    function getMovieData(movieId) {
        const apiBase = '/api/v2';

        $.ajax({
            url: apiBase + '/movies/' + movieId,
            success: function (response) {
                dateStart = response.launch_date.replace(/^(.{10})T.+/, '$1');
                dateEnd = response.generalSalesDateFinish.replace(/^(.{10})T.+/, '$1');

                $('.js-md-title').html(response.title);

                renderMovieData(response);
                render({movieInfo: response});
            },
            error: function (jqXHR) {
                if (jqXHR.status !== 200) {
                    renderServerError($('.movie-page'), jqXHR.status)
                }
            }
        });
    }

    function setColClassByKey(key) {
        const $rTableRows = $('.md-table__row');

        $rTableRows.each(function (index, row) {

            const $cols = $(row).find('.md-table__col');

            $cols.each(function(index, col) {
                $(col).removeClass('md-table__col_active');
            });

            $($cols[key]).addClass('md-table__col_active');
        });
    }

    function getColKey($target, $cols) {
        let key = null;

        $cols.each(function(i, col) {

            const $titleInCol = $(col).find('.js-md-table-title');

            if (!$titleInCol) return;
            if ($titleInCol.get(0) === $target.get(0)) key = i;
        });

        return key;
    }


})(jQuery);;function initSwiper($container, context) {
    if (!$container.length) return;

    const $forwardBtn = $container.find('.swiper-forward');
    const $backwardBtn = $container.find('.swiper-backward');
    const $slideWidth = $container.find('.swiper-slide').width();
    const $swiperNavigation = $container.find('.swiper-navigation');

    const swiper = new Swiper($container.get(0), {
        direction: 'horizontal',
        slidesPerView: 'auto',
        freeMode: true,
        resistanceRatio: .001,
        scrollbar: {
            el: '.swiper-scrollbar',
        },
        on: {
            touchStart: function () {
                checkDisabledBtns();
            },
            touchEnd: function () {
                checkDisabledBtns();
                checkColumnsOffset(this.getTranslate(), context);
            },
            transitionEnd: function () {
                checkColumnsOffset(this.getTranslate(), context);
            },
            reachBeginning: function () {
                $backwardBtn.addClass('swiper-btn_disabled');
            },
            reachEnd: function () {
                $forwardBtn.addClass('swiper-btn_disabled');
            }
        }
    });

    if ($slideWidth <= swiper.width) {
        $swiperNavigation.addClass('swiper-navigation_hidden');
        swiper.destroy();
    }

    $swiperNavigation.on('click', function (e) {

        const $target = $(e.target).closest('.swiper-btn');
        if (!$target) return;

        const $maxTranslate = swiper.width - $slideWidth;
        const $currentTranslate = swiper.getTranslate();

        swiper.setTransition(200);

        if ($target.hasClass('swiper-forward')) {

            if (swiper.isEnd) return;

            if ($maxTranslate - $currentTranslate <= -100) {
                $backwardBtn.removeClass('swiper-btn_disabled');
                swiper.setTranslate($currentTranslate - 100);
            } else {
                swiper.setTranslate($maxTranslate);
                $backwardBtn.removeClass('swiper-btn_disabled');
                $target.addClass('swiper-btn_disabled');
            }

        } else if ($target.hasClass('swiper-backward')) {
            if (swiper.isBeginning) return;

            if ($currentTranslate <= -100) {
                $forwardBtn.removeClass('swiper-btn_disabled');
                swiper.setTranslate($currentTranslate + 100);
            } else {
                swiper.setTranslate(0);
                $forwardBtn.removeClass('swiper-btn_disabled');
                $target.addClass('swiper-btn_disabled');
            }
        }

        checkColumnsOffset(swiper.getTranslate(), context);
    });

    checkColumnsOffset(0, context);


    function checkDisabledBtns() {
        const $maxTranslate = swiper.width - $slideWidth;
        const $currentTranslate = swiper.getTranslate();

        if ($currentTranslate >= 0) {
            $backwardBtn.addClass('swiper-btn_disabled');
        } else {
            $backwardBtn.removeClass('swiper-btn_disabled');
        }

        if ($maxTranslate - $currentTranslate >= 0) {
            $forwardBtn.addClass('swiper-btn_disabled');
        } else {
            $forwardBtn.removeClass('swiper-btn_disabled');
        }
    }

    function checkColumnsOffset($translate, context) {
        if (context === undefined) {
            context = 'c';
        }

        const $graphColumns = $('.js-graph-column');

        $.each($graphColumns, function (index, column) {
            const $column = $(column);
            const $columnOverlay = $column.find('.' + context + '-graph__overlay');
            const $containerWidth = $column.closest('.js-' + context + '-graph-container').width();

            if  ($containerWidth - ($column.position().left + $translate) < 280) {
                $columnOverlay.addClass(context + '-graph__overlay-left')
            } else {
                $columnOverlay.removeClass(context + '-graph__overlay-left')
            }
        });
    }
}

function getDateObjFromString(dateString) {
    return new Date(dateString.replace(/(\d+)\.(\d+)\.(\d+)/, '$3-$2-$1'))
}

function setDigitDischarge() {
    const $bitwiseDigitEl = $('.js-bitwise-digit');

    $.each($bitwiseDigitEl, function (index, item) {
        item.innerText = item.innerText.toString().replace(/\B(?=(\d{3})+(?!\d))/g, "\u202f");
    })
}

function renderServerError($el, error, pageLink) {

    $el.html('' +
        '<div class="server-error">' +
        '' +
        '        <h2 class="server-error__title">Ошибка (' + error + ')</h2>' +
        '        <p class="server-error__text">' +
        '            При обработке запроса произошла ошибка на сервере или превышен' +
        '            лимит времени обработки. Попробуйте повторить Ваши действия' +
        '            снова.' +
        '        </p>' +
        '        <a class="server-error__link">Вернуться на страницу</a>' +
        '' +
        '    </div>'


    )

    $('.server-error__link').on('click', function() {
        location.reload();
    })
};function initCalendarsPicker(element) {
    if (!element) return;

    pickmeup.defaults.locales['ru'] = {
        days: ['Воскресенье', 'Понедельник', 'Вторник', 'Среда', 'Четверг', 'Пятница', 'Суббота'],
        daysShort: ['Вс', 'Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб'],
        daysMin: ['Вс', 'Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб'],
        months: ['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь'],
        monthsShort: ['Янв', 'Фев', 'Мар', 'Апр', 'Май', 'Июн', 'Июл', 'Авг', 'Сен', 'Окт', 'Ноя', 'Дек']
    };

    pickmeup(element, {
        flat: true,
        mode: 'range',
        calendars: 3,
        prev: '',
        next: '',
        min: '01.01.2015',
        max: new Date(),
        select_month: false,
        select_year: false,
        format: 'd.m.Y',
        locale: 'ru',
        title_format: function(date, locale) {
            return '<span class="pmu-title">' +
                locale.months[date.getMonth()] +
                '<span class="pmu-title__year">' +
                date.getFullYear() +
                '</span>' +
                '</span>';
        }
    });

    $('.pmu-month.pmu-button').on('click', function (e) {
        e.preventDefault();
        e.stopPropagation();
    });
};const $chronology = $('.js-rpm-chronology');
const $chronologyDragger = $chronology.find('.js-rpm-dragger');
let yearsCount = null;
let maxRight = null;

function initDateDragger(currentMonthLeft, calendarEl) {
    const $chronologyYears = $('.js-rpm-chronology-year');
    yearsCount = $chronology.children().length - 5;
    maxRight = 300 * yearsCount;

    $chronologyYears.each(function (index, year) {
        $(year).on('click', function (e) {
            const draggerPositionStart = $chronologyDragger.position().left;
            const $chronologyItem = $(e.target).closest('.js-rpm-chronology-item');

            $chronologyDragger.css('left', $chronologyItem.position().left + $chronologyItem.outerWidth() - 75 + 'px');

            if (($chronologyItem.position().left + $chronologyItem.outerWidth() - 75) / 2 >= maxRight) {
                $chronology.css('right', maxRight + 'px');
            } else if (($chronologyItem.position().left + $chronologyItem.outerWidth() - 75) / 2 <= currentMonthLeft) {
                $chronology.css('right', currentMonthLeft + 'px');
            } else {
                $chronology.css('right', ($chronologyItem.position().left + $chronologyItem.outerWidth() - 75) / 2 + 'px');
            }

            const draggerPositionEnd = $chronologyDragger.position().left;

            if (draggerPositionEnd > draggerPositionStart) {
                for (let i = 0; i < Math.ceil((draggerPositionEnd - draggerPositionStart) / 25); i++) {
                    pickmeup(calendarEl).prev();
                }
            } else {
                for (let i = 0; i < Math.ceil((draggerPositionStart - draggerPositionEnd) / 25); i++) {
                    pickmeup(calendarEl).next();
                }
            }
        })
    });

    $chronologyDragger.get(0).onmousedown = function (e) {
        const draggerCoords = getCoords($chronologyDragger.get(0));
        const shiftX = e.pageX - draggerCoords.left;

        const chronologyCoords = getCoords($chronology.get(0));

        document.onmousemove = function (e) {
            let newLeft = e.pageX - shiftX - chronologyCoords.left;

            if (newLeft < currentMonthLeft) {
                newLeft = currentMonthLeft;
            }
            let rightEdge = $chronology.outerWidth() - $chronologyDragger.outerWidth();
            if (newLeft > rightEdge) {
                newLeft = rightEdge;
            }

            $chronologyDragger.css('left', newLeft + 'px');
        };

        const draggerPositionStart = $chronologyDragger.position().left;

        document.onmouseup = function (e) {
            const translate = e.pageX - shiftX - draggerCoords.left;
            const chronologyRightPos = $chronology.css('right').length ? parseInt($chronology.css('right')) : 0;

            if (currentMonthLeft <= chronologyRightPos <= maxRight) {
                if (chronologyRightPos + translate >= maxRight) {
                    $chronology.css('right', maxRight + 'px');
                } else if (chronologyRightPos + translate <= currentMonthLeft) {
                    $chronology.css('right', currentMonthLeft + 'px');
                } else {
                    $chronology.css('right', chronologyRightPos + translate + 'px');
                }
            }

            const draggerPositionEnd = $chronologyDragger.position().left;

            if (draggerPositionEnd > draggerPositionStart) {
                $chronologyDragger.css('left', Math.ceil($chronologyDragger.position().left / 25) * 25 + 'px');

                for (let i = 0; i < Math.ceil((draggerPositionEnd - draggerPositionStart) / 25); i++) {
                    pickmeup(calendarEl).prev();
                }
            } else {
                $chronologyDragger.css('left', Math.floor($chronologyDragger.position().left / 25) * 25 + 'px');

                for (let i = 0; i < Math.ceil((draggerPositionStart - draggerPositionEnd) / 25); i++) {
                    pickmeup(calendarEl).next();
                }
            }

            document.onmousemove = document.onmouseup = null;
        };

        return false; // disable selection start (cursor change)
    };

    $chronologyDragger.get(0).ondragstart = function () {
        return false;
    };

    function getCoords(elem) { // кроме IE8-
        const box = elem.getBoundingClientRect();

        return {
            top: box.top + pageYOffset,
            left: box.left + pageXOffset
        };

    }
}

function onInputDate(e, start, calendarEl, currentMonthLeft) {
    const val = e.target.value;

    if (e.data && !/\d|\./.test(e.data)) {
        e.target.value = val.slice(0, -1);
    } else {
        let dateStart = $('.js-r-period-date-start').val();
        let dateEnd = $('.js-r-period-date-end').val();

        start === 'start' ? dateStart = checkValidDate(e.target) : dateEnd = checkValidDate(e.target);

        if (dateStart && dateEnd) {
            start === 'start' ? e.target.value = dateStart : e.target.value = dateEnd;

            const dateEndFormatted = getDateObjFromString(dateEnd);
            const dateStartFormatted = getDateObjFromString(dateStart);

            let $inputYearEl = null;
            let $inputYearMonthsEl = null;
            let inputDate = null;

            if (dateEndFormatted < dateStartFormatted) {
                pickmeup(calendarEl).set_date([dateEnd, dateStart]);

                inputDate = getDateObjFromString(dateStart);
            } else {
                pickmeup(calendarEl).set_date([dateStart, dateEnd]);

                inputDate = getDateObjFromString(dateEnd);
            }

            $inputYearEl = $('[data-year = "' + inputDate.getFullYear() + '"]');
            $inputYearMonthsEl = $inputYearEl.find('.rpm-chronology__item-month');

            let inputMonthLeft = $inputYearEl.position().left
                + $($inputYearMonthsEl[inputDate.getMonth()]).position().left - 25;

            inputMonthLeft = inputMonthLeft <= currentMonthLeft ? currentMonthLeft : inputMonthLeft;

            $chronologyDragger.css('left', inputMonthLeft + 'px');
            $chronology.css('right', (inputMonthLeft <= maxRight ? inputMonthLeft : maxRight) + 'px');

            setActiveMonthsInYear(dateStart, dateEnd);

            return start === 'start' ? dateStart : dateEnd;
        }
    }
}

function setActiveMonthsInYear(dateStart, dateEnd) {
    let dateEndFormatted = getDateObjFromString(dateEnd);
    let dateStartFormatted = getDateObjFromString(dateStart);

    const $allMonthEls = $('.rpm-chronology__item-month');

    $allMonthEls.each(function(index, month) {
        $(month).removeClass('rpm-chronology__item-month_active')
    });

    if (dateEndFormatted < dateStartFormatted) {
        const dateHelper = dateStartFormatted;

        dateStartFormatted = dateEndFormatted;
        dateEndFormatted = dateHelper;
    }

    for (let i = dateStartFormatted.getFullYear(); i <= dateEndFormatted.getFullYear(); i++) {
        let item = {
            year: i,
            months: {
                count: 12,
                start: 'begin'
            }
        };

        const startMonth = dateStartFormatted.getMonth();
        const $monthEls = $('[data-year = "' + item.year + '"] .rpm-chronology__item-month');
        let $activeMonths = null;

        if (dateStartFormatted.getFullYear() === dateEndFormatted.getFullYear()) {

            dateStartFormatted.getMonth() === dateEndFormatted.getMonth()
                ? item.months.count = 1
                : item.months.count = dateEndFormatted.getMonth() - dateStartFormatted.getMonth() + 1;

            $activeMonths = $monthEls.slice(startMonth, startMonth + item.months.count);

        } else {
            if (dateStartFormatted.getFullYear() === i) {
                item.months.count = 12 - dateStartFormatted.getMonth();
                item.months.start = 'end';
            } else if (dateEndFormatted.getFullYear() === i) {
                item.months.count = dateEndFormatted.getMonth() + 1;
            }

            $activeMonths = item.months.start === 'end' ? $monthEls.slice(-item.months.count) : $monthEls.slice(0, item.months.count);
        }

        $activeMonths.each(function(index, month) {
            $(month).addClass('rpm-chronology__item-month_active')
        });
    }
}

function checkValidDate(el) {
    if (/^([0-2]\d|[1-9]|3[0-1])\.(0\d|[1-9]|1[0-2])\.\d{4}/.test(el.value)) {
        $(el).removeClass('r-period-modal__date_err');

        const now = new Date();
        const beginDate = getDateObjFromString('01.01.2015');

        if (getDateObjFromString(el.value) > now) {
            return now.getDate() + '.'
                + (now.getMonth() + 1 < 10 ? '0' + (now.getMonth() + 1) : (now.getMonth() + 1) ) + '.'
                + now.getFullYear();
        }

        if (getDateObjFromString(el.value) < beginDate) {
            return beginDate.getDate() + '.'
                + (beginDate.getMonth() + 1 < 10 ? '0' + (beginDate.getMonth() + 1) : (beginDate.getMonth() + 1) ) + '.'
                + beginDate.getFullYear();
        }

        return el.value;
    } else {
        $(el).addClass('r-period-modal__date_err');

        return false;
    }
};function manageTitleClasses($target, $titles) {
    if ($target.hasClass('r-table__title_active')) {

        if ($target.hasClass('r-table__title_desc')) {
            $target.toggleClass('r-table__title_desc');
            $target.toggleClass('r-table__title_asc');
        } else if ($target.hasClass('r-table__title_asc')) {
            $target.addClass('r-table__title_desc');
            $target.removeClass('r-table__title_asc');
        } else {
            $target.addClass('r-table__title_desc');
        }

    } else {

        $titles.each(function (index, item) {
            $(item).removeClass('r-table__title_active');
            $(item).removeClass('r-table__title_desc');
            $(item).removeClass('r-table__title_asc');
        });

        $target.addClass('r-table__title_active');
        $target.addClass('r-table__title_desc');

    }
}

function setColClassByKey(key) {
    const $rTableRows = $('.r-table__row');

    $rTableRows.each(function (index, row) {

        const $cols = $(row).find('.r-table__col');

        $cols.each(function(index, col) {
            $(col).removeClass('r-table__col_active');
        });

        $($cols[key]).addClass('r-table__col_active');
    });
}

function getColKey($target, $cols) {
    let key = null;

    $cols.each(function(i, col) {

        const $titleInCol = $(col).find('.js-r-table-title');

        if (!$titleInCol) return;
        if ($titleInCol.get(0) === $target.get(0)) key = i;
    });

    return key;
}
;function renderTable($el, data) {
    $el.html(
        data.map(function(row) {

            $('.js-r-table-title').each(function(index, item) {
                let hasMatch = false;

                for (key in row.data) {
                    $(item).data('type') === key ? hasMatch = true : '';
                }

                !hasMatch
                    ? $(item).addClass('r-table__title_disable')
                    : $(item).removeClass('r-table__title_disable')
            });

            return '' +
                '<div class="r-table__row">' +

                '<div class="r-table__col">' +
                '<span class="r-table__date">' +
                row.date_start.replace(/(\d+)\.(\d+)\.(\d+)/, '$3.$2') + '-' +
                row.date_end.replace(/(\d+)\.(\d+)\.(\d+)/, '$3.$2.$1') +
                '</span>' +
                '</div>' +


                '<div class="r-table__col r-table__col-wrapper">' +
                (row.data.sum ?
                    '<span class="r-table__text js-bitwise-digit">' + Math.floor(row.data.sum) + '</span>' +
                    (row.data.sum_delta ?
                        '<div>' +
                        '<span class="r-table__delta' + (row.data.sum_delta > 0 ? " r-table__delta_up" : " r-table__delta_down") + '"></span>' +
                        '<span class="r-table__delta-count">' + (row.data.sum_delta > 0 ? '+ ' : '') + Math.round(row.data.sum_delta) + '%</span>' +
                        '</div>'
                        : '')
                    : '<span class="r-table__text">Нет данных</span>') +
                '</div>' +

                '<div class="r-table__col r-table__col-wrapper">' +
                (row.data.tickets ?
                    '<span class="r-table__text js-bitwise-digit">' + Math.floor(row.data.tickets) + '</span>' +
                    (row.data.tickets_delta ?
                        '<div>' +
                        '<span class="r-table__delta' + (row.data.tickets_delta > 0 ? " r-table__delta_up" : " r-table__delta_down") + '"></span>' +
                        '<span class="r-table__delta-count">' + (row.data.tickets_delta > 0 ? '+ ' : '') + Math.round(row.data.tickets_delta) + '%</span>' +
                        '</div>'
                        : '')
                    : '<span class="r-table__text">Нет данных</span>') +
                '</div>' +

                '<div class="r-table__col r-table__col-wrapper">' +
                (row.data.sessions ?
                    '<span class="r-table__text js-bitwise-digit">' + Math.floor(row.data.sessions) + '</span>' +
                    (row.data.sessions_delta ?
                        '<div>' +
                        '<span class="r-table__delta' + (row.data.sessions_delta > 0 ? " r-table__delta_up" : " r-table__delta_down") + '"></span>' +
                        '<span class="r-table__delta-count">' + (row.data.sessions_delta > 0 ? '+ ' : '') + Math.round(row.data.sessions_delta) + '%</span>' +
                        '</div>'
                        : '')
                    : '<span class="r-table__text">Нет данных</span>') +
                '</div>' +

                '<div class="r-table__col r-table__col-wrapper">' +
                (row.data.money_per_session ?
                    '<span class="r-table__text js-bitwise-digit">' + Math.floor(row.data.money_per_session) + '</span>' +
                    (row.data.money_per_session_delta ?
                        '<div>' +
                        '<span class="r-table__delta' + (row.data.money_per_session_delta > 0 ? " r-table__delta_up" : " r-table__delta_down") + '"></span>' +
                        '<span class="r-table__delta-count">' + (row.data.money_per_session_delta > 0 ? '+ ' : '') + Math.round(row.data.money_per_session_delta) + '%</span>' +
                        '</div>'
                        : '')
                    : '<span class="r-table__text">Нет данных</span>') +
                '</div>' +

                '<div class="r-table__col r-table__col-wrapper">' +
                (row.data.tickets_per_session ?
                    '<span class="r-table__text js-bitwise-digit">' + Math.floor(row.data.tickets_per_session) + '</span>' +
                    (row.data.tickets_per_session_delta ?
                        '<div>' +
                        '<span class="r-table__delta' + (row.data.tickets_per_session_delta > 0 ? " r-table__delta_up" : " r-table__delta_down") + '"></span>' +
                        '<span class="r-table__delta-count">' + (row.data.tickets_per_session_delta > 0 ? '+ ' : '') + Math.round(row.data.tickets_per_session_delta) + '%</span>' +
                        '</div>'
                        : '')
                    : '<span class="r-table__text">Нет данных</span>') +
                '</div>' +



                '<div class="r-table__col r-table__col-wrapper">' +
                (row.data.money_per_ticket ?
                    '<span class="r-table__text js-bitwise-digit">' + Math.floor(row.data.money_per_ticket) + '</span>' +
                    (row.data.money_per_ticket_delta ?
                        '<div>' +
                        '<span class="r-table__delta' + (row.data.money_per_ticket_delta > 0 ? " r-table__delta_up" : " r-table__delta_down") + '"></span>' +
                        '<span class="r-table__delta-count">' + (row.data.money_per_ticket_delta > 0 ? '+ ' : '') + Math.round(row.data.money_per_ticket_delta) + '%</span>' +
                        '</div>'
                        : '')
                    : '<span class="r-table__text">Нет данных</span>') +
                '</div>' +

                '<div class="r-table__col">' +

                (row.data.top_movies_data.top_movies ?
                    row.data.top_movies_data.top_movies.map(function(topMovie, i) {
                        if (i > 2) return;
                        return '<a href="/rating/movie/' + topMovie.id + '" class="r-table__link">' + topMovie.title + '</a>'
                    }).join('') +

                    '<a href="/statistics/" class="r-table__link r-table__link_top">Топ 20</a>'
                    : '<span class="r-table__text">Нет данных</span>') +
                '</div>' +
                '</div>'
        }).join('')
    );
}

function filterBySelectedPeriod(list) {
    const $customPeriodRange = $('#js-select-irregular-period').find("select");
    const customPeriodRange = $customPeriodRange.val();
    // const findPeriod = (date) => {
    //     const result = IRREGULAR_PERIODS.filter(item => {
    //         return item.value == date;
    //     });
    //
    //     return result.length > 0 ? result[0].value.split("-") : null;
    // };
    // const customSelectedPeriod = customPeriodRange === "all" ? null : findPeriod(customPeriodRange);
    // console.log(customPeriodRange, list)
    return customPeriodRange === "all" ?
        list
        : list.filter(function(item) {
            const period = {
                start:  moment(item.date_start, "YYYY.MM.DD"),
                end: moment(item.date_end, "YYYY.MM.DD")
            };
            const customRangeArr = customPeriodRange.split("-");
            const customPeriod = {
                start: moment(customRangeArr[0], "DD.MM.YYYY"),
                end: moment(customRangeArr[1], "DD.MM.YYYY")
            };
            console.log(period.start.format("DD.MM.YYYY"), customPeriod.start.format("DD.MM.YYYY"), " ----", period.end.format("DD.MM.YYYY"), customPeriod.end.format("DD.MM.YYYY"));
            if (
                (
                    period.start.isSame(customPeriod.start) || period.start.isAfter(customPeriod.start)
                )
                && (
                    period.end.isSame(customPeriod.end) || period.end.isBefore(customPeriod.end)
                )
            ) {
                return true;
            } else {
                return false;
            }


            const yearStart = period.start.get('year');
            const yearEnd = period.end.get('year');

            if (customSelectedPeriod && yearStart === yearEnd) {

                const selectedPeriod = {
                    start: moment(customSelectedPeriod[0], "DD.MM").set('year', yearStart),
                    end: moment(customSelectedPeriod[1], "DD.MM").set('year', yearEnd)
                };

                if (
                    (
                        period.start.isSame(selectedPeriod.start) || period.start.isAfter(selectedPeriod.start)
                    )
                    && (
                        period.end.isSame(selectedPeriod.end) || period.end.isBefore(selectedPeriod.end)
                    )
                ) {
                    return true;
                }
            } else if(customSelectedPeriod) {
                const subPeriod1 = {
                    start:  period.start,
                    end: moment().set("year", yearStart).set("month", 11).set("date", 31)
                };
                const subPeriod2 = {
                    start:  moment().set("year", yearEnd).set("month", 0).set("date", 0),
                    end: period.end
                };

                const subSelectedPeriod1 = {
                    start: moment(customSelectedPeriod[0], "DD.MM").set('year', yearStart),
                    end: moment().set("year", yearStart).set("month", 11).set("date", 31)
                };
                const subSelectedPeriod2 = {
                    start:  moment().set("year", yearEnd).set("month", 0).set("date", 1),
                    end: moment(customSelectedPeriod[1], "DD.MM").set('year', yearEnd)
                };


                if (
                    (
                        (
                            subPeriod1.start.isAfter(subSelectedPeriod1.start)
                            || subPeriod1.start.isSame(subSelectedPeriod1.start)
                        )
                        && (
                            subPeriod1.start.isBefore(subSelectedPeriod1.end)
                            || subPeriod1.start.isSame(subSelectedPeriod1.end)
                        )
                    )
                    && (
                        (
                            subPeriod2.end.isBefore(subSelectedPeriod2.end)
                            || subPeriod2.end.isSame(subSelectedPeriod2.end)
                        )
                        && (
                            subPeriod2.end.isAfter(subSelectedPeriod2.start)
                            || subPeriod2.end.isSame(subSelectedPeriod2.start)
                        )
                    )
                ) {
                    // console.warn("HIT", subSelectedPeriod2.start.format('DD.MM.YYYY'))
                    // console.log(subPeriod1, subPeriod2)
                    // console.log(subSelectedPeriod1, subSelectedPeriod2)
                    // console.log("_______________________________")
                    //     return true;
                }
            }


            return false;
        });
}

function renderGraph($el, data, originalType, typeLabel) {
    originalType = originalType ? originalType : "tickets";
    typeLabel = typeLabel ? typeLabel : "";

    let maxValueInType = 0;

    data.map(function (item) {
        item.data[type] > maxValueInType
            ? maxValueInType = item.data[type] : ''
    });

    if (data.length === 0) {
        $el.html('<div class="r-graph__no-results">За выбранный период нет результатов</div>');
    } else {
        $el.html('' +
            '<div class="swiper-container js-rating-graph-container">' +
            '<div class="swiper-wrapper">' +
            '<div class="r-graph__wrapper swiper-slide">' +
            '<div class="r-graph__section">' +
            '<div class="r-graph__body">' +
            data.map(function(item) {
                const data = item.data;

                return '' +

                    '<div class="r-graph__column js-graph-column" style="height: ' + data[type] / (maxValueInType / 100) + '%">' +
                    '<div class="r-graph__column_inner" style="height:' + data.top_movies_data[type] / ( data[type] / 100 ) + '%">' +
                    '</div>' +
                    '<div class="rating-graph__overlay">' +
                    '<span class="rating-graph__overlay-triangle"></span>' +
                    '<span class="rating-graph__overlay-title">' + typeLabel + '</span>' +
                    '<div class="rating-graph__overlay-item">' +

                    '<span class="rating-graph__overlay-marker"></span>' +
                    '<span class="rating-graph__overlay-label">Всего</span>' +
                    '<span class="rating-graph__overlay-count js-bitwise-digit">' + Math.round(data[type]) + '</span>' +
                    '<span class="rating-graph__overlay-percent"></span>' +

                    '</div>' +
                    (data.top_movies_data[type] ?
                        ('<div class="rating-graph__overlay-top">' +

                            '<div class="rating-graph__overlay-item">' +
                            '<span class="rating-graph__overlay-marker" style="background: #86c230;"></span>' +
                            '<span class="rating-graph__overlay-label">Топ 3 фильма</span>' +
                            '<span class="rating-graph__overlay-count js-bitwise-digit">' +
                            Math.round(data.top_movies_data[type]) +
                            '</span>' +
                            '<span class="rating-graph__overlay-percent">' +
                            Math.round(data.top_movies_data[type] / (data[type] / 100)) + '%' +
                            '</span>' +
                            '</div>' +

                            '<div class="rating-graph__overlay-top-films">' +
                            data.top_movies_data.top_movies.map(function (item, i) {
                                if (i > 2) return;
                                return '<span class="rating-graph__overlay-top-film">' + item.title + '</span>'
                            }).join('') +
                            '</div>' +

                            '</div>' )
                        : ('')) +
                    '</div>' +
                    '</div>'

            }).join('') +
            '</div>' +
            '<div class="r-graph__labels">' +
            data.map(function(item) {
                return '' +
                    '<span class="r-graph__label">' +
                    item.date_start.replace(/(\d+)\.(\d+)\.(\d+)/, '$3.$2') +
                    '-' + item.date_end.replace(/\d{2}(\d+)\.(\d+)\.(\d+)/, '$3.$2.$1') +
                    '</span>'
            }).join('') +
            '</div>' +
            '</div>' +
            '</div>' +
            '</div>' +
            '<div class="swiper-navigation">' +
            '<div class="swiper-btn swiper-backward swiper-btn_disabled"></div>' +
            '<div class="swiper-scrollbar"></div>' +
            '<div class="swiper-btn swiper-forward"></div>' +
            '</div>' +
            '</div>');
    }
}

function renderModalYears($el) {

    const now = new Date();

    $el.find('.js-rpm-chronology-item').each(function(index, item) {
        $(item).remove();
    });

    for (let i = 2015; i <= (now.getFullYear() + 1); i++) {
        const element = '<div class="rpm-chronology__item js-rpm-chronology-item" data-year="' + i + '">' +
            '                        <span class="rpm-chronology__item-label js-rpm-chronology-year">' + i + '</span>' +

            '                        <div class="rpm-chronology__item-months">' +
            '                            <div class="rpm-chronology__item-month"></div>' +
            '                            <div class="rpm-chronology__item-month"></div>' +
            '                            <div class="rpm-chronology__item-month"></div>' +
            '                            <div class="rpm-chronology__item-month"></div>' +
            '                            <div class="rpm-chronology__item-month"></div>' +
            '                            <div class="rpm-chronology__item-month"></div>' +
            '                            <div class="rpm-chronology__item-month"></div>' +
            '                            <div class="rpm-chronology__item-month"></div>' +
            '                            <div class="rpm-chronology__item-month"></div>' +
            '                            <div class="rpm-chronology__item-month"></div>' +
            '                            <div class="rpm-chronology__item-month"></div>' +
            '                            <div class="rpm-chronology__item-month"></div>' +
            '                        </div>' +
            '                    </div>';

        $el.append(element)
    }

};;(function($) {

    const $rGraph = $('.js-r-graph');
    if (!$rGraph.length) { return; }

    const $rTableBody = $('.js-r-table-body');
    const $rTableTitles = $('.js-r-table-title');
    const $rTableHeadCols = $('.r-table__head .r-table__col');

    const $ratingGraphSortWrapper = $('.js-rb-display');
    const $ratingGraphSortBtns = $ratingGraphSortWrapper.find('.js-rb-display-btn');
    let $ratingGraphContainer = $('.js-rating-graph-container');

    const $customPeriodRange = $('#js-select-irregular-period');
    const $periodFilterDate = $('.js-r-period-filter');
    const $dateStartEl = $('.js-r-period-date-start');
    const $dateEndEl = $('.js-r-period-date-end');

    const now = new Date();
    let dateStart = null,
        dateEnd = null;

    setCustomPeriods();

    initSwiper($ratingGraphContainer, 'rating');
    setDefaultParams(true);

    $rTableTitles.each(function (index, title) {
        $(title).on('click', function (e) {
            const $target = $(e.target).closest('.js-r-table-title');

            if ($target.hasClass('r-table__title_disable')) {
                return;
            }

            manageTitleClasses($target, $rTableTitles);
            render();
        })
    });

    $ratingGraphSortBtns.on('click', function (e) {
        const $target = $(e.target).closest('.js-rb-display-btn');
        if (!$target || $target.hasClass('rb-filters__display-item_active')) return;

        const isDisable = $target.closest('.js-r-filters-display').hasClass('rb-filters__display-disable');
        if (isDisable) return;

        const $sortParam = $target.data('display');
        setActiveDisplayBtn($sortParam);
    });

    $customPeriodRange.on('change', function (e) {
        const currentValue = $(e.target).val();

        if (currentValue !== 'all') {
            $('.js-r-filters-display').addClass('rb-filters__display-disable')
        } else {
            $('.js-r-filters-display').removeClass('rb-filters__display-disable')
        }

        render()
    });

    $('.js-rb-reset').on('click', function () {
        setDefaultParams()
    });


    /** start modal */
    const $periodModal = $('.js-period-modal');
    const $periodModalCross = $('.js-hide-period-modal');
    const $periodModalBtn = $('.js-rpm-btn');
    const $chronology = $('.js-rpm-chronology');
    const $chronologyDragger = $chronology.find('.js-rpm-dragger');
    const $historySwitcher = $('input[name="history"]');

    let calendarsEl = document.querySelector('.js-r-period-calendars');
    let currentMonthLeft = null;
    let isModalInit = false;

    renderModalYears($chronology);
    $chronology.css('width', ($chronology.children().length - 2) * 300 + 'px');
    initCalendarsPicker(calendarsEl);
    pickmeup(calendarsEl).set_date([dateStart, dateEnd]);
    setActiveMonthsInYear(dateStart, dateEnd);

    calendarsEl.addEventListener('pickmeup-change', function (e) {
        dateStart = e.detail.formatted_date[0];
        dateEnd = e.detail.formatted_date[1];

        $dateStartEl.val(dateStart);
        $dateEndEl.val(dateEnd);

        setActiveMonthsInYear(dateStart, dateEnd);
    });

    $periodFilterDate.on('click', function () {
        showModal($periodModal);

        if (!isModalInit) {
            const now = new Date();
            const $currentYearEl = $('[data-year = "' + now.getFullYear() + '"]');
            const $currentYearMonthsEl = $currentYearEl.find('.rpm-chronology__item-month');

            currentMonthLeft = $currentYearEl.get(0).offsetLeft + $currentYearMonthsEl[now.getMonth()].offsetLeft;

            $chronologyDragger.css('left', currentMonthLeft + 'px');
            $chronology.css('right', currentMonthLeft + 'px');

            initDateDragger(currentMonthLeft, calendarsEl);

            isModalInit = true;
        }
    });

    $historySwitcher.on('change', function() {
        const $switcherLabel = $historySwitcher.parent().find('.r-period-modal__check-label');

        if ($historySwitcher.prop('checked')) {
            $switcherLabel.addClass('r-period-modal__check-label_active');
            setAllHistoryParams();
        } else {
            $switcherLabel.removeClass('r-period-modal__check-label_active');
            setDefaultParams(false, true);
        }
    });

    $periodModalBtn.on('click', function () {
        const $btnOverlay = $('.js-rpm-btn-overlay');
        const date_start = getDateObjFromString(dateStart);
        const date_end = getDateObjFromString(dateEnd);
        let dateDiff = null;

        if (date_end >= date_start) {
            dateDiff = (date_end - date_start) / 86400000
        } else {
            dateDiff = (date_start - date_end) / 86400000
        }

        if (dateDiff < 14) {
            $btnOverlay.show();
        } else {
            $btnOverlay.hide();
            saveRpmPeriod();
            hideModal($periodModal);
        }
    });

    $periodModalCross.on('click', function () {
        hideModal($periodModal);
    });

    $(document).on('keydown', function (e) {
        if (e.key === 'Escape') {
            hideModal($periodModal);
        }
    });

    $dateStartEl.on('input', function (e) { dateStart = onInputDate(e, 'start', calendarsEl, currentMonthLeft)});
    $dateEndEl.on('input', function (e) { dateEnd = onInputDate(e, 'end', calendarsEl, currentMonthLeft)});

    function saveRpmPeriod() {
        setDatesRange(dateStart, dateEnd);
        render();
    }

    function showModal($modal) {
        $modal.addClass('modal-active');
    }

    function hideModal($modal) {
        $modal.removeClass('modal-active');
    }

    /** end modal */

    function setDefaultParams(isInitial, noRender) {
        /** Todo: Исправить, когда увеличат время ожидания на сервере */
        // dateStart = now.getDate() + '.'
        //     + (now.getMonth() + 1 < 10 ? '0' + (now.getMonth() + 1) : (now.getMonth() + 1) ) + '.'
        //     + (now.getFullYear() - 1);
        dateStart = (now.getDate() < 10 ? ('0' + now.getDate()) : now.getDate()) + '.'
            + ((now.getMonth() - 1) < 10 ? '0' + (now.getMonth() - 1) : (now.getMonth() - 1)) + '.'
            + now.getFullYear() ;
        dateEnd = (now.getDate() < 10 ? ('0' + now.getDate()) : now.getDate()) + '.'
            + ((now.getMonth() + 1) < 10 ? '0' + (now.getMonth() + 1) : (now.getMonth() + 1)) + '.'
            + now.getFullYear();

        $dateStartEl.val(dateStart);
        $dateEndEl.val(dateEnd);
        setDatesRange(dateStart, dateEnd);

        if (!isInitial) {
            setActiveMonthsInYear(dateStart, dateEnd);
            pickmeup(calendarsEl).set_date([dateStart, dateEnd]);
            setDefaultDraggerPisition();
        }

        if (noRender) return;

        if (now.getDay() >= 0 && now.getDay() < 3) {
            setActiveDisplayBtn('weekend');
        } else {
            setActiveDisplayBtn('week');
        }

        $('.js-custom-select-list li:first-child').trigger('click');
    }

    function setAllHistoryParams() {
        dateStart = '01.01.2015';
        dateEnd = now.getDate() + '.'
            + (now.getMonth() + 1 < 10 ? '0' + (now.getMonth() + 1) : (now.getMonth() + 1) ) + '.'
            + now.getFullYear();

        $dateStartEl.val(dateStart);
        $dateEndEl.val(dateEnd);
        setDatesRange(dateStart, dateEnd);
        setActiveMonthsInYear(dateStart, dateEnd);
        pickmeup(calendarsEl).set_date([dateStart, dateEnd]);
        setDefaultDraggerPisition();
    }

    function setDefaultDraggerPisition() {
        $chronologyDragger.css('left', currentMonthLeft + 'px');
        $chronology.css('right', currentMonthLeft + 'px');
    }

    function setActiveDisplayBtn(type) {
        const $shouldSetActive = $('.js-rb-display-btn[data-display="' + type + '"]');

        $.each($ratingGraphSortBtns, function (index, item) {
            $(item).removeClass('rb-filters__display-item_active');
        });

        $shouldSetActive.addClass('rb-filters__display-item_active');

        $rGraph.removeClass('r-graph_month');
        $rGraph.removeClass('r-graph_week');
        $rGraph.removeClass('r-graph_weekend');
        $rGraph.addClass('r-graph_' + type);

        render();
    }

    function render() {
        const apiBase = '/api/v2';

        const $activeTypeEl = $('.r-table__title_active');

        const activeColKey = $activeTypeEl ? getColKey($activeTypeEl, $rTableHeadCols) : null;

        const sortType = $activeTypeEl.data('type');
        const sortTypeLabel = $activeTypeEl.text();
        const sortDirection =
            $activeTypeEl && $activeTypeEl.hasClass('r-table__title_asc')
                ? 'ascending'
                : $activeTypeEl.hasClass('r-table__title_desc')
                ? 'descending' : '';

        const currentDates = $periodFilterDate.html().split(' - ');
        let date_start = null,
            date_end   = null;

        if (getDateObjFromString(currentDates[0]) < getDateObjFromString(currentDates[1])) {
            date_start = currentDates[0];
            date_end = currentDates[1];
        } else {
            date_end = currentDates[0];
            date_start = currentDates[1];
        }

        const groupingType = $('.js-rb-display-btn.rb-filters__display-item_active').data('display');

        let params = {
            date_start: date_start.replace(/(\d+)\.(\d+)\.(\d+)/, '$3.$2.$1'),
            date_end: date_end.replace(/(\d+)\.(\d+)\.(\d+)/, '$3.$2.$1'),
            grouping: groupingType,
            sort: sortDirection,
            top: '3'
        };

        if (sortType) {
            params.sort_type = sortType;
        }

        function joinApiLink(params) {
            let link = '';
            for (key in params) {
                params[key]
                    ? link += key + '=' + params[key] + '&' : '';
            }
            return '/rating?' + link
        }

        $('.rb-head').removeClass('rb-head_disable');
        $('.r-table__head').removeClass('r-table__head_disable');

        $ratingGraphContainer = $('.js-rating-graph-container');

        initSwiper($ratingGraphContainer, 'rating');
        activeColKey && setColClassByKey(activeColKey);
        setDigitDischarge();

        $.ajax({
            url: apiBase + joinApiLink(params),
            beforeSend: function () {
                $rTableBody.html('<div class="r-table__loading"></div>');
                $rGraph.html('<div class="r-graph__loading"></div>');
                $('.rb-head').addClass('rb-head_disable');
                $('.r-table__head').addClass('r-table__head_disable');
            },
            success: function (response) {
                const list = filterBySelectedPeriod(response);
                renderTable($rTableBody, list);
                renderGraph($rGraph, list, sortType, sortTypeLabel);

                $('.rb-head').removeClass('rb-head_disable');
                $('.r-table__head').removeClass('r-table__head_disable');

                $ratingGraphContainer = $('.js-rating-graph-container');

                initSwiper($ratingGraphContainer, 'rating');
                activeColKey && setColClassByKey(activeColKey);
                setDigitDischarge();
            },
            error: function (jqXHR) {
                if (jqXHR.status !== 200) {
                    renderServerError($('.rating-page'), jqXHR.status)
                }
            }
        });
    }

    function setDatesRange(dateStart, dateEnd) {
        $periodFilterDate.html(dateStart + ' - ' + dateEnd);
        setCustomPeriods();
    }

    function setCustomPeriods() {
        $customPeriodRange.find("select").html("");
        $customPeriodRange.find("select").append('<option value="all">Весь период</option>');

        if (dateStart && dateEnd) {
            IRREGULAR_PERIODS.forEach(function(item) {
                const selected = [
                    moment(dateStart, "DD.MM.YYYY"),
                    moment(dateEnd, "DD.MM.YYYY")
                ];

                const custom = item.value.split("-");
                custom[0] = moment(custom[0], "DD.MM");
                custom[1] = moment(custom[1], "DD.MM");

                if (custom[0].month() > custom[1].month()) {
                    custom[0].year(custom[1].year() - 1);
                } else if (selected[0].year() == selected[1].year()) {
                    custom[0].year(selected[0].year());
                    custom[1].year(selected[1].year());
                }

                if (
                    (
                        selected[0].isSame(custom[0])
                        || selected[0].isBefore(custom[0])
                    )
                    && (
                        selected[1].isSame(custom[1])
                        || selected[1].isAfter(custom[1])
                    )
                ){
                    $customPeriodRange.find("select").append('<option value="' + custom[0].format("DD.MM.YYYY") + '-' + custom[1].format("DD.MM.YYYY") + '">' + item.text + '</option>');
                }
            });
        }
    }

})(jQuery);;!function($) {
    "use strict";

}(jQuery);;;(function($){
    'use strict';

    //ready
    $(function(){

        $('.rg-tabs-nav a').on('click',function(e){
            e.preventDefault();

            $('.rg-tabs-nav a').removeClass('-act');
            $(this).addClass('-act');

            $('.rg-tab').removeClass('-show');
            $( $(this).attr('href') ).addClass('-show');

        });

    });
}(jQuery));
;;(function($){
    'use strict';

    $('#release-schedule-form').bind('submit', function(){

        var t = $(this),
            $dateStart = $('#periodStart'),
            $dateEnd = $('#periodEnd');

        remove_error_class();

        if ( $dateStart.val() == '' ) {
            $.lib.alert({
                'id': 'alert-err-release-schedule',
                'head': t.attr('data-msg-head'),
                'text': $dateStart.attr('data-msg-error-empty'),
                'error': 1
            })
            $dateStart.addClass('-error');
            return false;
        }
        if ( $dateEnd.val() == '' ) {
            $.lib.alert({
                'id': 'alert-err-release-schedule',
                'head': t.attr('data-msg-head'),
                'text': $dateEnd.attr('data-msg-error-empty'),
                'error': 1
            })
            $dateEnd.addClass('-error');
            return false;
        }

        function remove_error_class() {
            t.find('-error').removeClass('-error');
        }

    })

}(jQuery));
;;!function($) {
    'use strict';

    $('.select-film.js').each(function(){

        var t = $(this),
            $body = $('body'),
            $display = t.find('.sf-display-value'),
            $btn = t.find('.sf-display-value'),
            $dropdown = t.find('.sf-dropdown'),
            $dropdown_list = t.find('.sf-dropdown-list'),
            $items = $dropdown.find('.sf-item-film'),
            $hidden = t.find('.sf-hidden'),
            $search_box = t.find('.sf-search'),
            $search_field = $search_box.find('[type=text]'),
            $search_clear =  $search_box.find('.sf-search-clear');

        var films_html_from_post = '';
        var search_field_query_timeout = null;
        var FLAG_COMPONENTS_ON_CLICK = false;

        var default_item_html = $display.html();

        //search
        $search_field.on('keyup', function(e){

            var t = $(this);
            clearTimeout(search_field_query_timeout);

            if ( t.val() == '' ) {
                films_html_from_post = '';
                loaded_dropdown()
            } else {
                search_field_query_timeout = setTimeout(function () {

                    loaded_dropdown(t.val());
                    search_field_query_timeout = null;

                }, 250);
            }

        });

        $search_clear.on('click', function(){
            $search_field.val('');
            $search_field.trigger('keyup');

            reset();
        })

        $search_box.on('click', function(e){
            e.stopPropagation();
        })


        $('body').on('click.---js-select-films', function( e ){
            if (!FLAG_COMPONENTS_ON_CLICK) $dropdown.hide();
            FLAG_COMPONENTS_ON_CLICK = false;
        });

        $(window).on('scroll.---js-select-films', function(){
            if (!FLAG_COMPONENTS_ON_CLICK) $dropdown.hide();
            FLAG_COMPONENTS_ON_CLICK = false;
        })

        $btn.on('click',function(e){
            e.preventDefault();
            $dropdown.show();
            loaded_dropdown();

            FLAG_COMPONENTS_ON_CLICK = true;
        });

        $dropdown.on('click',function(){
            $dropdown.hide();

            FLAG_COMPONENTS_ON_CLICK = true;
        });

        $dropdown.on('click', '.sf-item-film', function( e ){
            e.stopPropagation();
            $dropdown.hide();

            $items.removeClass('-act');
            $(this).addClass('-act');

            $hidden.val( $(this).attr('data-film-id') );
            $display.html( $(this).clone() );

            FLAG_COMPONENTS_ON_CLICK = true;

        });

        function loaded_dropdown(query) {

            var param = {},
                url_for_post = '/ekb/top-films/';

            if (query) {
                param.query = query;
                url_for_post = '/ekb/search-films/';
            }

            if ( !films_html_from_post || query ) {
                $dropdown.addClass('-loaded');
                films_html_from_post = '';

                $.post(url_for_post, param, function( response ){

                    $dropdown.removeClass('-loaded');
                    $dropdown.removeClass('-error');

                    var data = JSON.parse(response);

                    if ( !data.length ) {
                        dropdown_error();
                        return;
                    }

                    films_html_from_post = '';
                    data.map(function(d){
                        films_html_from_post += $.lib.create_tmpl('select-film-item', d);
                    });

                    $dropdown_list.html(films_html_from_post);
                    $items = $dropdown.find('.sf-item-film');

                }).error(function(){
                    dropdown_error();
                });

            }

        }

        function dropdown_error() {
            $dropdown.removeClass('-loaded');
            $dropdown.addClass('-error');
            $dropdown_list.html($.lib.create_tmpl('select-film-error'));
        }

        function reset() {
            $hidden.val('');
            $display.html(default_item_html);
        }

    });

}(jQuery);;;;(function($){
    'use strict';

    //ready
    $(function(){

        $('.filter').each(function(){

            var t = $(this),
                $filter_opener = t.find('.js-filter-open'),
                $filter_opener_part = t.find('.js-filter-open-part'),
                $days = t.find('.filter-date-day > *'),
                $tags = t.find('.filter-tags a'),
                $days_reset = t.find('.filter-date-reset');

            var param = {};

            if ( t.attr('data-param') )
                param = JSON.parse( t.attr('data-param') );

            var array_alias_tags = param.tags || [];
            var array_date_range = [];

            var $all_tag = $tags.filter(function(){
                return $(this).attr('href') == '#all'
            });

            var post_interval,
                post = null;

            //open filter
            if ( !$all_tag.hasClass('-act') ) {
                $filter_opener.trigger('click');
            }

            //event
            $filter_opener_part.bind('click', function( e ){
                e.preventDefault();

                var $filter_part = t.find( $(this).attr('href') );

                t.find('.filter-part-box').removeClass('-is-last-closed');
                $filter_part.height( $filter_part.find('.filter-part-box-body').innerHeight() ) ;
                if ( $(this).hasClass('-act') ) {

                    $filter_part.addClass('-close');
                    $(this).removeClass('-act');

                } else {

                    $filter_part.removeClass('-close');
                    $(this).addClass('-act');

                }

                //is last - part box
                if ( t.find('.filter-part-box').length == t.find('.filter-part-box.-close').length ) {
                    $filter_part.addClass('-is-last-closed');
                }

            })

            $filter_opener.bind('click', function( e ){
                e.preventDefault();

                t.find('.filter-body').height( t.find('.filter-body-inner').innerHeight() );
                if ( $(this).hasClass('-act') ) {

                    t.addClass('-close');
                    $(this).removeClass('-act');

                } else {

                    t.removeClass('-close');
                    $(this).addClass('-act');

                }

            })

            $days.bind('click', function( e ){
                e.preventDefault();

                var act_size = t.find('.filter-date-day > .-act').size() > 0;

                if ( !act_size && $(this).hasClass('-dis') )
                    return;

                //active
                array_date_range = displaySelectActive( $(this) );

                send();

            })

            $days_reset.bind('click', function( e ){
                e.preventDefault();
                $days.removeClass('-act');

                array_date_range = [];
                send();

            })

            $tags.bind('click', function( e ){
                e.preventDefault();

                array_alias_tags = [];

                if ( $(this).attr('href') == "#all" ) {

                    $tags.removeClass('-act');
                    $(this).addClass('-act');

                } else {

                    $all_tag.removeClass('-act');
                    $(this).toggleClass('-act');

                    if (!$tags.parent().find('.-act').length) {
                        $all_tag.addClass('-act');
                        array_alias_tags = [];
                    } else {

                        $tags.parent().find('.-act').each(function(){
                            array_alias_tags.push( $(this).attr('href').replace('#', '' ) );
                        });
                    }
                }

                send();

            })

            month_slider();

            function month_slider() {

                if ( t.find('.filter-date-rows').length && $.fn.slick )
                    t.find('.filter-date-rows').slick({
                        'prevArrow': '<a href="#" class="filter-date-arw-left"></a>',
                        'nextArrow': '<a href="#" class="filter-date-arw-right"></a>',
                        'infinite': false,
                        'initialSlide': t.find('.filter-date-row').length - 1
                    })

            }

            function displaySelectActive( $elOnClick ) {

                var $res = [];

                var $acts = t.find('.filter-date-day > .-act'),
                    $act_start = $acts.eq(0),
                    $act_end = $acts.eq(-1),
                    elOnClick_pos = $days.index( $elOnClick ),
                    act_start_pos = $days.index( $act_start ),
                    act_end_pos = $days.index( $act_end );

                if ( $acts.length == 0 ) {
                    $elOnClick.addClass('-act');
                    $res = [ $elOnClick.attr('data-date') ];
                }

                var sel_start = act_start_pos,
                    sel_end = act_end_pos;

                if ( $acts.length >= 1 ) {

                    if ( elOnClick_pos == act_start_pos ) {
                        sel_start = elOnClick_pos + 1;
                    }else
                    if ( elOnClick_pos == act_end_pos ) {
                        sel_end = elOnClick_pos - 1;
                    }else
                    if ( elOnClick_pos > act_end_pos ) {
                        sel_end = elOnClick_pos;
                    }else
                    if ( elOnClick_pos < act_start_pos ) {
                        sel_start = elOnClick_pos;
                    } else {

                        if ( elOnClick_pos - act_start_pos > act_end_pos - elOnClick_pos ) {
                            sel_end = elOnClick_pos;
                        } else {
                            sel_start = elOnClick_pos;
                        }

                    }

                    $days.removeClass('-act');
                    for (var i = sel_start; i <= sel_end; i++) {
                        $days.eq(i).addClass('-act');
                    }

                    $res = [ $days.eq(sel_start).attr('data-date'), $days.eq(sel_end).attr('data-date') ];

                }

                if (  !t.find('.filter-date-day > .-act').size() ) $res = [];

                return $res;

            }

            function send() {
                param.tags = array_alias_tags;
                param = $.lib.add_csrf( param );
                param.date_range = array_date_range;

                clearInterval( post_interval );
                post_interval = setTimeout(function(){

                    $('body').addClass('-container-load');

                    post = $.post( param.url, param )
                        .success(function( data ){

                            $( param.container ).find( 'article, .last-label, .empty').remove();
                            $( param.container ).append(data);

                            var $load_more_btn = $( param.load_more_btn ),
                                load_more_btn_param = JSON.parse( $load_more_btn.attr('data-param') );

                            load_more_btn_param.tags = array_alias_tags;
                            load_more_btn_param.date_range = array_date_range;

                            $load_more_btn
                                .show()
                                .attr('data-page', 1 )
                                .attr('data-param', JSON.stringify( load_more_btn_param ) );

                            if ( $( param.container ).find('.last-label').length ) {
                                $load_more_btn.hide();
                            }

                            if ( param.masonry ) {
                                $.lib.masonry( param.container );
                            }

                        })
                        .error(function(){
                            $.lib.alert({
                                'id': 'alert-load-news',
                                'head': t.attr('data-msg-head'),
                                'text': t.attr('data-msg-error'),
                                'error': 1
                            });
                        })
                        .always(function(){
                            $('body').removeClass('-container-load');
                        });


                }, 900);
            }

        })

    });
}(jQuery));
;;!function($){
    "use strict";

    function SelectCurrency($parent) {

        var t = $parent;

        if ( $parent.hasClass('-init') )
            return;

        var $val = t.find('.scr-val');
        var $list = t.find('.scr-list');

        t.on('click.select-currency', function(){
            $('.select-currency').not(t).removeClass('-open');
            t.toggleClass('-open');
        });
        $(document).on('click.select-currency', function(e){
            if ( !$(e.target).hasClass('select-currency') &&
                !$(e.target).closest('.select-currency').size()
            )
                $('.select-currency').removeClass('-open');
        });
        $list.find('li').on('click.select-currency', function(){

            var curId =  $(this).attr('data-val');

            $val.find(' > span').html( $(this).html() );

            $list.find('li').removeClass('-act');
            $(this).addClass('-act');

            if ( $parent.attr('data-owner-selector') )
                $( $parent.attr('data-owner-selector') ).attr('data-cur-id', curId );

            t.trigger('changeCurrency', [ $(this).attr('data-val') ]);
        });

        $parent.addClass('-init');

        this.getValue = function() {
            return $list.find('.-act').attr('data-val') || 0;
        }

    }

    function init($t) {
        $t.data('SelectCurrency', new SelectCurrency( $t ) );
    }

    $('body').on('init.select-currency', '.select-currency', function(){
        init($(this));
    });

    $(function(){

        $('.select-currency').each( function() {
            init($(this));
        });

    })

}(jQuery);
;;(function($){
    "use strict";

    const
        COLOR_FILL_2 = '#d2c6de',
        COLOR_FILL = '#805b9f',
        Y_SCALE = 1.1;

    function GraphBeziers( $parent ) {
        var t = this,
            $canvas = $parent.find('canvas'),
            canvas = $canvas[0],
            ctx = canvas.getContext('2d'),
//            ctx_width = (isFilmDetail ? $(".graph-beziers-box .js-tabs-contain .-open") : $parent).width() - 66,
            ctx_width = (isFilmDetail ? ( $parent.attr("id").indexOf("js-statistic-film-") === -1 ? $parent : $(".graph-beziers-box .js-tabs-contain .-open")): $parent).width() - 66,
            ctx_height = 185;

        var
            min_value = null,
            max_value = null,
            col_width = null,
            col_height_ratio = null;

        t.values_start = null;
        t.values_end = null;

        $canvas.attr('width', ctx_width );
        $canvas.attr('height', ctx_height );

        t.getCoordLines = function( values ) {
            var res = [];
            var max_value = Math.max.apply( Math, values );

            values.map(function( e, i ){
                var c = {};

                c.x = col_width * (i + 1) - col_width / 2;
                c.y = ctx_height * ( 1 - e / (max_value * Y_SCALE) ) ;

                res[i] = c;
            });

            return res;
        }

        t.getSumValues = function(values){
            var sum = 0;
            values.map(function(e){
                sum += e;
            })
            return sum;
        }

        t.setLegendLabels = function( params ) {

            var max = $.lib.max( params.values ) * Y_SCALE;

            if ( max <= 0 ) return;

            $parent.find('.bz-title-1').text( $.lib.numberToFormatGraph( Math.round(max), max, true) );
            $parent.find('.bz-title-2').text( $.lib.numberToFormatGraph( Math.round(max * 0.75), max, true) );
            $parent.find('.bz-title-3').text( $.lib.numberToFormatGraph( Math.round(max * 0.5), max, true) );
            $parent.find('.bz-title-4').text( $.lib.numberToFormatGraph( Math.round(max * 0.25), max, true) );

            var col_len = 0;
            params.titles.map(function(t, i){
                if ( params.titles.length <= 7 || i % 2 == 0 ) {
                    col_len++;
                    $parent.find('.bz-title-bot-' + (i + 1)).text(t);
                }
            });

            $parent.addClass('-col-' + col_len);

        }

        t.clearLegendLabels = function() {
            $parent.find('[class*="bz-title-"]:not(.bz-title-bot)').text('');
            $parent.find('[class*="bz-title-bot-"]').text('');

            for (var i = 0; i < 20; i++)
                $parent.removeClass('-col-' + i);

        }

        t.setCtxStyle = function() {

            var grd = ctx.createLinearGradient(ctx_width/2,0,ctx_width/2,ctx_height);
            grd.addColorStop(0.5, COLOR_FILL);
            grd.addColorStop(1, COLOR_FILL_2);

            ctx.fillStyle = grd;
            ctx.strokeStyle = grd;
        };

        t.draw = function(params) {

            t.clear();
            $parent.removeClass('-error');
            t.setLegendLabels(params);

            min_value = Math.min.apply( Math, params.values );
            max_value = Math.max.apply( Math, params.values );

            //set start, end for y-scale
            t.values_start = min_value - ( max_value - min_value ) / (params.values.length - 1);
            t.values_end = max_value +  ( max_value - min_value ) / (params.values.length - 1);

            col_height_ratio = ctx_height / (t.values_end - t.values_start);
            col_width = ctx_width / params.values.length;


            var points = t.getCoordLines(params.values);

            draw();

            function draw() {

                paper.setup( canvas );
                var view = paper.view;
                var Path = paper.Path;
                var Point = paper.Point;

                var speed = 7;

                var path1 = new Path({
                    fillColor: {
                        gradient: {
                            stops: ['#d2c6de', '#805b9f']
                        },
                        origin: [0, view.size.height],
                        destination: [0, 0]
                    },
                    closed: true
                });

                function initializePath() {

                    path1.add(view.bounds.bottomLeft);

                    for (var i = 0; i < points.length; i++)
                        path1.add(new Point(0, 0));

                    path1.add(view.bounds.bottomRight);

                    path1.smooth({type: 'asymmetric'});

                    /*
                                        points.map(function(p){
                                            var circle = new Path.Circle(p, 3);
                                            circle.fillColor = '#ee2a33';
                                        })
                    */
                }

                initializePath();

                view.onFrame = function (event) {
                    var _speed = speed || 1,
                        itr = Math.round(100 / _speed);

                    var p = points;

                    if (event.count == itr) {
                        view.pause();
                    } else {

                        for (var i = 0; i < p.length; i++) {

                            var point = new Point(p[i].x, view.size.height - ( view.size.height - p[i].y ) * (event.count / itr) );

                            path1.segments[i + 1].point = point;
                        }

                        path1.smooth();
                    }
                }
            }
        }

        t.enableLoader = function() {
            $parent.addClass('-loaded');
        }
        t.disableLoader = function() {
            $parent.removeClass('-loaded');
        }
        t.displayError = function() {
            t.clear();
            t.disableLoader();
            $parent.addClass('-error');
        }
        t.clear = function() {
            $parent.removeClass('-error');
            t.disableLoader();
            t.clearLegendLabels();
            ctx.clearRect(0, 0, ctx_width, ctx_height);
        }

    }

    $(function(){
        $('.graph-beziers').each(function(){
            var gb =  new GraphBeziers( $(this) );

            $(this).on('enableLoader',function() {
                gb.enableLoader();
            })
            $(this).on('disableLoader',function() {
                gb.disableLoader();
            })
            $(this).on('displayError',function() {
                gb.displayError();
            })
            $(this).on('draw',function(e, p) {
                gb.draw(p);
            })

        })
    })

}(jQuery));
;;(function($){
    "use strict";

    $('.js-search-autocomplete').each(function(){

        var source = $(this).attr('data-source') || '/ekb/search-films-ui/';

        $(this).autocomplete({
            minLength: 0,
            source: source,
            select: function( event, ui ) {
                var t = $(this);
                setTimeout(function(){
                    t.closest('form').trigger('submit');
                }, 200)
            }
        })
        $(this).autocomplete( "instance" )._renderItem = function( ul, item ) {
            return $( "<li class='sf-item-film' />" )
                .append( "<div>" + item.label + "</div><span>" + item.RL + "</span>" )
                .appendTo( ul );
        };
        $(this).autocomplete( "instance" )._resizeMenu = function () {
            var ul = this.menu.element;
            ul.outerWidth(this.element.outerWidth());
        };


    })

})(jQuery);;;(function($){
    "use strict";

    var
        LINE_COLOR = ['#ffae00', '#ff6600', '#e2e2e2'],
        LINE_WIDTH = 4,
        CANVAS_WIDTH = 150,
        CANVAS_HEIGHT = 150;

    $(function(){
        $('.graph-round-diagram').each(function(){

            var t = $(this),
                canvas = t.find('canvas')[0],
                ctx = canvas.getContext('2d'),
                values = JSON.parse($(canvas).attr('data-value'));

            var
                sum_values = 0;

            values.map(function( e ){
                sum_values += e;
            });

            if ( 100 > sum_values )
                values.push( 100 - sum_values );

            $(canvas).attr('width', CANVAS_WIDTH);
            $(canvas).attr('height', CANVAS_HEIGHT);

            ctx.width = CANVAS_WIDTH;
            ctx.height = CANVAS_HEIGHT;

            ctx.lineWidth = LINE_WIDTH;


            var
                endAngle = 1.5,
                startAngle = undefined,
                gap = 0.01;

            values.map(function(e, i){

                startAngle = endAngle + gap;
                endAngle = startAngle + ( values[i] ) / 100 * 2 - gap;

                if (endAngle < startAngle) {
                    var _e = endAngle;
                    endAngle = startAngle;
                    startAngle = _e;
                }

                ctx.strokeStyle = LINE_COLOR[i];
                ctx.beginPath();
                ctx.arc(CANVAS_WIDTH / 2, CANVAS_HEIGHT / 2, (CANVAS_WIDTH - LINE_WIDTH) / 2, startAngle * Math.PI, endAngle * Math.PI, false);
                ctx.stroke();

            });

        });
    })

}(jQuery));;;(function($){
    "use strict";

    var COLOR_LINE = '#75b925',
        WIDTH_LINE = 4,
        WIDTH_BOX_ROUNDED = 74;

    function Canvas( canvas ) {

        var t = this;

        t.ctx = canvas.getContext('2d');

        t.ctx_width = null;
        t.ctx_height = null;

        t.draw = function() {}
        t.clear = function() {
            t.ctx.clearRect(0, 0, t.ctx_width, t.ctx_height);
        }

        t.constructor = function() {
            $(canvas).attr('width', t.ctx_width);
            $(canvas).attr('height', t.ctx_height);
            t.ctx.width = WIDTH_BOX_ROUNDED;
            t.ctx.height = WIDTH_BOX_ROUNDED;
        }

    }

    function GraphRoundSimple( $canvas ) {

        var t = this,
            parent = Canvas;
        parent.apply(t, arguments);


        t.ctx_width = WIDTH_BOX_ROUNDED;
        t.ctx_height = WIDTH_BOX_ROUNDED;

        t.draw = function( value ) {
            t.clear();

            t.ctx.strokeStyle = COLOR_LINE;
            t.ctx.fillStyle = COLOR_LINE;
            t.ctx.lineWidth = WIDTH_LINE;

            var endAngle = (value/100 * 2 - 0.5 + 2) * Math.PI;

            t.ctx.beginPath();
            t.ctx.arc(WIDTH_BOX_ROUNDED/2, WIDTH_BOX_ROUNDED/2, (WIDTH_BOX_ROUNDED - WIDTH_LINE)/2, 1.5 * Math.PI, endAngle, false);
            t.ctx.stroke();

        }

        t.constructor();
    }

    $(function(){
        $('.graph-round-small').each(function(){

            var t = $(this),
                canvas = t.find('canvas')[0];

            var GRS = new GraphRoundSimple( canvas );

            t.on('draw', function( e, value ){
                t.removeClass('-loaded');
                t.removeClass('-error');
                GRS.draw( value );
                $(this).find('.grd-value b').text( value.toFixed(2) );
            })
            t.on('error', function(){
                t.removeClass('-loaded');
                t.addClass('-error');
                GRS.clear();
                $(this).find('.grd-value b').text('--');
            });

        });
    })

}(jQuery));;;$(function($){
    "use strict";

    $(function(){
        $('.js-select').each(function(){
            $(this).data('custom-select', new customSelect( $(this) ) );
        });

        $('body').on('init.js-select', '.js-select', function(){
            $(this).data('custom-select', new customSelect( $(this) ) );
        });

    });

    function customSelect( $parentSelect ) {

        $parentSelect.hide();

        var t  = this;

        t.stateOpen = false;
        t.currentOptionsIdx = 0;
        t.options = [];

        t.$customSelect4box = $('<span class="js-custom-select-4-box" />');
        t.$customSelect = $('<span class="js-custom-select" />');
        t.$valueBlock = $('<span class="js-custom-select-value" />');
        t.$optionsListBlock = $('<ul class="js-custom-select-list" />');

        if ( $parentSelect.attr('data-js-select-is-block') )
            t.$customSelect4box.addClass('_block');

        t.setParamCustomSelect = function() {
            if ( $parentSelect.attr('data-width') )
                t.$valueBlock.width( $parentSelect.attr('data-width') )
        }

        t.setValueForParentSelect = function() {
            $parentSelect.val( t.options[ t.currentOptionsIdx ]['value']  )
        }

        t.getOptionsFromParentSelect = function() {
            var res = [];

            $parentSelect.find('option:enabled').each(function(){
                res.push({
                    'value': $(this).attr('value') || $(this).text(),
                    'label': $(this).text(),
                    'class': $(this).attr('class'),
                    'qty': $(this).attr('data-qty')
                })
            });

            return res;

        }

        t.currentOptionIdxFromParentSelect = function() {

            var idx = 0;
            var parentValue = $parentSelect.val();
            var options = t.getOptionsFromParentSelect();

            options.map(function( t, i ){
                if ( parentValue == t['value'] )
                    idx = i;
            });

            return idx;

        }

        t.renderListOptions = function() {
            var html = '';

            t.currentOptionsIdx = t.currentOptionIdxFromParentSelect();
            t.options = t.getOptionsFromParentSelect();

            $parentSelect.find('option:enabled').each(function( i ){

                var attrClass = (i == t.currentOptionsIdx ? '-act' : '') + ( $(this).attr('class') ? ' ' + $(this).attr('class') : '' );
                var attrValue = $(this).attr('value') || $(this).text();
                var qty = $(this).attr('data-qty');

                if ( qty && !t.$customSelect.hasClass('_qty') )
                    t.$customSelect.addClass('_qty');

                html += '<li' + (attrClass ? ' class="' + attrClass + '"': '') + '>'
                    + $(this).text() + (typeof qty !== 'undefined' ? '<span>' + qty + '</span>' : '') + '</li>';

            });

            return html;
        }

        t.setLabel = function( label, qty ) {
            var qty_html = typeof qty !== 'undefined' ? '<span>' + qty + '</span>' : '';
            t.$valueBlock.html( label + qty_html );
        }

        t.open = function() {
            t.$optionsListBlock.html( t.renderListOptions() );

            t.$optionsListBlock.css({
                'top': t.$valueBlock.offset().top + t.$valueBlock.innerHeight() + 5 - $(window).scrollTop(),
                'left': t.$valueBlock.offset().left - $(window).scrollLeft(),
                'width': t.$valueBlock.innerWidth() * 1.1 + 'px'
            });

            t.$optionsListBlock.show();
            t.stateOpen = true;

        }

        t.hide = function( label, qty ) {
            t.$optionsListBlock.hide();
            t.stateOpen = false;

            if ( label )
                t.setLabel( label, qty );
        }

        t._init = function() {

            var FLAG_COMPONENTS_ON_CLICK = false;

            t.currentOptionsIdx = t.currentOptionIdxFromParentSelect();
            t.options = t.getOptionsFromParentSelect();

            //create custom select
            t.setParamCustomSelect();
            t.$customSelect.append( t.$valueBlock );
            t.$customSelect.append( t.$optionsListBlock );
            t.$customSelect4box.append( t.$customSelect );
            $parentSelect.after( t.$customSelect4box );
            t.setLabel( t.options[ t.currentOptionsIdx ]['label'], t.options[ t.currentOptionsIdx ]['qty'] );

            //event
            $('body').on('click.---js-select', function( e ){
                if (!FLAG_COMPONENTS_ON_CLICK) t.hide();
                FLAG_COMPONENTS_ON_CLICK = false;
            });

            $(window).on('scroll.---js-select', function(){
                if (!FLAG_COMPONENTS_ON_CLICK) t.hide();
                FLAG_COMPONENTS_ON_CLICK = false;
            })

            t.$optionsListBlock.on('click', 'li', function( e ) {
                t.currentOptionsIdx = t.$optionsListBlock.find('li').index( $(this) );

                t.hide( t.options[ t.currentOptionsIdx ]['label'], t.options[ t.currentOptionsIdx ]['qty'] );

                t.setValueForParentSelect();

                $parentSelect.trigger('change');

                //-act
                t.$optionsListBlock.find('li').removeClass('-act');
                $(this).addClass('-act');

                FLAG_COMPONENTS_ON_CLICK = true;

            })
            t.$optionsListBlock.on('click', function( e ) {
                t.hide();
            })
            t.$valueBlock.on('click', function( e ){
                if ( t.stateOpen )
                    t.hide();
                else {
                    //hide all
                    $( '.' + $parentSelect.attr('class') ).each(function(){
                        $(this).data('custom-select').hide();
                    });
                    t.open();
                    $parentSelect.trigger('focusSelect');

                }

                FLAG_COMPONENTS_ON_CLICK = true;

            });

            $parentSelect.on('js-select-change',function(){
                t.currentOptionsIdx = t.currentOptionIdxFromParentSelect();
                t.options = t.getOptionsFromParentSelect();
                t.setLabel( t.options[ t.currentOptionsIdx ]['label'], t.options[ t.currentOptionsIdx ]['qty'] );
            });

            $parentSelect.on('close',function(){
                $(this).data('custom-select').hide();
            });

        }

        t._init();

    }

}(jQuery));;(function($){
    'use strict';

    $(function(){
        $('.js-tabs').each(function(){

            var t = $(this),
                $navs = t.find('.js-tabs-nav'),
                $tabs = t.find('.js-tabs-contain');

            var name = $(this).attr('data-name') || '';

            if (name) {
                $navs = t.find('.js-tabs-nav[data-name="' + name + '"]');
                $tabs = t.find('.js-tabs-contain[data-name="' + name + '"]');
            }

            t.attr('data-open', $tabs.find('.-open').attr('id') );

            $navs.find(' > * ').bind('click', function(e){

                e.preventDefault();

                var id = $(this).attr('href');

                $navs.find(' > * ').removeClass('-act');
                $(this).addClass('-act');

                $tabs.find(' > * ').removeClass('-open');
                $( id ).addClass('-open');

                t.attr('data-open', id.replace('#',''));

                t.trigger('cahnge');

                $(window).resize();

            });

        })
    })

}(jQuery));;!function($) {
    "use strict";

    $('.select-tabs').each(function(){

        var t = $(this);
        t.attr('data-val', t.find('.-act').attr('data-val') || '');

        t.find(' > * ')
            .unbind('click')
            .bind('click', function(){
                t.find('.-act').removeClass('-act');

                $(this).addClass('-act');
                t.attr('data-val', $(this).attr('data-val'));

                t.trigger('change');
            });

    });

}(jQuery);;(function($){
    'use strict';

    $(function(){

        $('.questions.js').on('click', '.q-head a', function( e ){

            e.preventDefault();

            if ( !$(this).closest('.q-item').hasClass('-open') ) {
                $(this).closest('.q-category').find('.q-item').removeClass('-open');
                $(this).closest('.q-item').addClass('-open');
            } else {
                $(this).closest('.q-item').removeClass('-open');
            }

        });

        $('.questions.js').on('click', '.q-cat-head', function( e ){

            e.preventDefault();

            if ( !$(this).closest('.q-category').hasClass('-open-cat') ) {
                $(this).closest('.q-category').addClass('-open-cat');
            } else {
                $(this).closest('.q-category').removeClass('-open-cat');
            }

        });

    })

}(jQuery));
